/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AssetProperties struct for AssetProperties
type AssetProperties struct {
	Collection *CollectionDetails `json:"collection,omitempty"`
	// Image URL of this asset
	ImageUrl NullableString `json:"image_url,omitempty"`
	// Name of this asset
	Name NullableString `json:"name,omitempty"`
}

// NewAssetProperties instantiates a new AssetProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetProperties() *AssetProperties {
	this := AssetProperties{}
	return &this
}

// NewAssetPropertiesWithDefaults instantiates a new AssetProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetPropertiesWithDefaults() *AssetProperties {
	this := AssetProperties{}
	return &this
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *AssetProperties) GetCollection() CollectionDetails {
	if o == nil || o.Collection == nil {
		var ret CollectionDetails
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetProperties) GetCollectionOk() (*CollectionDetails, bool) {
	if o == nil || o.Collection == nil {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *AssetProperties) HasCollection() bool {
	if o != nil && o.Collection != nil {
		return true
	}

	return false
}

// SetCollection gets a reference to the given CollectionDetails and assigns it to the Collection field.
func (o *AssetProperties) SetCollection(v CollectionDetails) {
	o.Collection = &v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetProperties) GetImageUrl() string {
	if o == nil || o.ImageUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetProperties) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *AssetProperties) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableString and assigns it to the ImageUrl field.
func (o *AssetProperties) SetImageUrl(v string) {
	o.ImageUrl.Set(&v)
}
// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *AssetProperties) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *AssetProperties) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetProperties) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetProperties) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AssetProperties) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AssetProperties) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AssetProperties) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AssetProperties) UnsetName() {
	o.Name.Unset()
}

func (o AssetProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Collection != nil {
		toSerialize["collection"] = o.Collection
	}
	if o.ImageUrl.IsSet() {
		toSerialize["image_url"] = o.ImageUrl.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAssetProperties struct {
	value *AssetProperties
	isSet bool
}

func (v NullableAssetProperties) Get() *AssetProperties {
	return v.value
}

func (v *NullableAssetProperties) Set(val *AssetProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetProperties(val *AssetProperties) *NullableAssetProperties {
	return &NullableAssetProperties{value: val, isSet: true}
}

func (v NullableAssetProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


