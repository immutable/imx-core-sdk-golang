// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MintableTokenDetails mintable token details
//
// swagger:model MintableTokenDetails
type MintableTokenDetails struct {

	// Blueprint of this token
	// Required: true
	Blueprint *string `json:"blueprint"`

	// ID provided by the client for this token
	// Required: true
	ClientTokenID *string `json:"client_token_id"`

	// IMX Id of this token
	// Required: true
	TokenID *string `json:"token_id"`
}

// Validate validates this mintable token details
func (m *MintableTokenDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlueprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientTokenID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MintableTokenDetails) validateBlueprint(formats strfmt.Registry) error {

	if err := validate.Required("blueprint", "body", m.Blueprint); err != nil {
		return err
	}

	return nil
}

func (m *MintableTokenDetails) validateClientTokenID(formats strfmt.Registry) error {

	if err := validate.Required("client_token_id", "body", m.ClientTokenID); err != nil {
		return err
	}

	return nil
}

func (m *MintableTokenDetails) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_id", "body", m.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mintable token details based on context it is used
func (m *MintableTokenDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MintableTokenDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MintableTokenDetails) UnmarshalBinary(b []byte) error {
	var res MintableTokenDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
