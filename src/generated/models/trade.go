// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trade trade
//
// swagger:model Trade
type Trade struct {

	// Side A of this trade
	// Required: true
	A *TradeSide `json:"a"`

	// Side B of this trade
	// Required: true
	B *TradeSide `json:"b"`

	// Status of this trade
	// Required: true
	Status *string `json:"status"`

	// Time this trade occurred
	// Required: true
	Timestamp *string `json:"timestamp"`

	// Sequential ID of this trade within Immutable X
	// Required: true
	TransactionID *int64 `json:"transaction_id"`
}

// Validate validates this trade
func (m *Trade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trade) validateA(formats strfmt.Registry) error {

	if err := validate.Required("a", "body", m.A); err != nil {
		return err
	}

	if m.A != nil {
		if err := m.A.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *Trade) validateB(formats strfmt.Registry) error {

	if err := validate.Required("b", "body", m.B); err != nil {
		return err
	}

	if m.B != nil {
		if err := m.B.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("b")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("b")
			}
			return err
		}
	}

	return nil
}

func (m *Trade) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this trade based on the context it is used
func (m *Trade) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trade) contextValidateA(ctx context.Context, formats strfmt.Registry) error {

	if m.A != nil {
		if err := m.A.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("a")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("a")
			}
			return err
		}
	}

	return nil
}

func (m *Trade) contextValidateB(ctx context.Context, formats strfmt.Registry) error {

	if m.B != nil {
		if err := m.B.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("b")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("b")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trade) UnmarshalBinary(b []byte) error {
	var res Trade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
