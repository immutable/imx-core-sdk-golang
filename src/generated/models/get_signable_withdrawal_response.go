// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSignableWithdrawalResponse get signable withdrawal response
//
// swagger:model GetSignableWithdrawalResponse
type GetSignableWithdrawalResponse struct {

	// Amount of the token we are withdrawing
	// Required: true
	Amount *string `json:"amount"`

	// ID of the asset to be withdrawn
	// Required: true
	AssetID *string `json:"asset_id"`

	// Nonce of this transaction
	// Required: true
	Nonce *int64 `json:"nonce"`

	// Encoded payload hash
	// Required: true
	PayloadHash *string `json:"payload_hash"`

	// Message to sign with L1 wallet to verity withdrawal request
	// Required: true
	SignableMessage *string `json:"signable_message"`

	// Public stark key of this user
	// Required: true
	StarkKey *string `json:"stark_key"`

	// ID of the vault we are withdrawing from
	// Required: true
	VaultID *int64 `json:"vault_id"`
}

// Validate validates this get signable withdrawal response
func (m *GetSignableWithdrawalResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayloadHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignableMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarkKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSignableWithdrawalResponse) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableWithdrawalResponse) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("asset_id", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableWithdrawalResponse) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableWithdrawalResponse) validatePayloadHash(formats strfmt.Registry) error {

	if err := validate.Required("payload_hash", "body", m.PayloadHash); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableWithdrawalResponse) validateSignableMessage(formats strfmt.Registry) error {

	if err := validate.Required("signable_message", "body", m.SignableMessage); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableWithdrawalResponse) validateStarkKey(formats strfmt.Registry) error {

	if err := validate.Required("stark_key", "body", m.StarkKey); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableWithdrawalResponse) validateVaultID(formats strfmt.Registry) error {

	if err := validate.Required("vault_id", "body", m.VaultID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get signable withdrawal response based on context it is used
func (m *GetSignableWithdrawalResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetSignableWithdrawalResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSignableWithdrawalResponse) UnmarshalBinary(b []byte) error {
	var res GetSignableWithdrawalResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
