// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTransferRequestV1 create transfer request v1
//
// swagger:model CreateTransferRequestV1
type CreateTransferRequestV1 struct {

	// Amount to transfer
	// Required: true
	Amount *string `json:"amount"`

	// ID of the asset to transfer
	// Required: true
	AssetID *string `json:"asset_id"`

	// Expiration timestamp for this transfer
	// Required: true
	ExpirationTimestamp *int64 `json:"expiration_timestamp"`

	// Nonce of the transfer
	// Required: true
	Nonce *int64 `json:"nonce"`

	// Public stark key of the user receiving the transfer
	// Required: true
	ReceiverStarkKey *string `json:"receiver_stark_key"`

	// ID of the vault into which the asset will be transferred to
	// Required: true
	ReceiverVaultID *int64 `json:"receiver_vault_id"`

	// Public stark key of the user sending the transfer
	// Required: true
	SenderStarkKey *string `json:"sender_stark_key"`

	// ID of the vault into which the asset is from
	// Required: true
	SenderVaultID *int64 `json:"sender_vault_id"`

	// Transfer payload signature
	// Required: true
	StarkSignature *string `json:"stark_signature"`
}

// Validate validates this create transfer request v1
func (m *CreateTransferRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverStarkKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverVaultID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderStarkKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderVaultID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarkSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTransferRequestV1) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("asset_id", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateExpirationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("expiration_timestamp", "body", m.ExpirationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateReceiverStarkKey(formats strfmt.Registry) error {

	if err := validate.Required("receiver_stark_key", "body", m.ReceiverStarkKey); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateReceiverVaultID(formats strfmt.Registry) error {

	if err := validate.Required("receiver_vault_id", "body", m.ReceiverVaultID); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateSenderStarkKey(formats strfmt.Registry) error {

	if err := validate.Required("sender_stark_key", "body", m.SenderStarkKey); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateSenderVaultID(formats strfmt.Registry) error {

	if err := validate.Required("sender_vault_id", "body", m.SenderVaultID); err != nil {
		return err
	}

	return nil
}

func (m *CreateTransferRequestV1) validateStarkSignature(formats strfmt.Registry) error {

	if err := validate.Required("stark_signature", "body", m.StarkSignature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create transfer request v1 based on context it is used
func (m *CreateTransferRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateTransferRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTransferRequestV1) UnmarshalBinary(b []byte) error {
	var res CreateTransferRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
