// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EncodeAssetRequestToken encode asset request token
//
// swagger:model encodeAssetRequestToken
type EncodeAssetRequestToken struct {

	// Extra token information to be encoded
	Data *EncodeAssetTokenData `json:"data,omitempty"`

	// The type of the token to be encoded
	// Enum: [ETH ERC20 ERC721]
	Type string `json:"type,omitempty"`
}

// Validate validates this encode asset request token
func (m *EncodeAssetRequestToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncodeAssetRequestToken) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

var encodeAssetRequestTokenTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ETH","ERC20","ERC721"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		encodeAssetRequestTokenTypeTypePropEnum = append(encodeAssetRequestTokenTypeTypePropEnum, v)
	}
}

const (

	// EncodeAssetRequestTokenTypeETH captures enum value "ETH"
	EncodeAssetRequestTokenTypeETH string = "ETH"

	// EncodeAssetRequestTokenTypeERC20 captures enum value "ERC20"
	EncodeAssetRequestTokenTypeERC20 string = "ERC20"

	// EncodeAssetRequestTokenTypeERC721 captures enum value "ERC721"
	EncodeAssetRequestTokenTypeERC721 string = "ERC721"
)

// prop value enum
func (m *EncodeAssetRequestToken) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, encodeAssetRequestTokenTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EncodeAssetRequestToken) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this encode asset request token based on the context it is used
func (m *EncodeAssetRequestToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncodeAssetRequestToken) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EncodeAssetRequestToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncodeAssetRequestToken) UnmarshalBinary(b []byte) error {
	var res EncodeAssetRequestToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
