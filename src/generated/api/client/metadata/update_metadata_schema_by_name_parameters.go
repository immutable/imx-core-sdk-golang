// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"immutable.com/imx-core-sdk-golang/api/models"
)

// NewUpdateMetadataSchemaByNameParams creates a new UpdateMetadataSchemaByNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateMetadataSchemaByNameParams() *UpdateMetadataSchemaByNameParams {
	return &UpdateMetadataSchemaByNameParams{
		timeout:                cr.DefaultTimeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewUpdateMetadataSchemaByNameParamsWithTimeout creates a new UpdateMetadataSchemaByNameParams object
// with the ability to set a timeout on a request.
func NewUpdateMetadataSchemaByNameParamsWithTimeout(timeout time.Duration) *UpdateMetadataSchemaByNameParams {
	return &UpdateMetadataSchemaByNameParams{
		timeout:                timeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewUpdateMetadataSchemaByNameParamsWithContext creates a new UpdateMetadataSchemaByNameParams object
// with the ability to set a context for a request.
func NewUpdateMetadataSchemaByNameParamsWithContext(ctx context.Context) *UpdateMetadataSchemaByNameParams {
	return &UpdateMetadataSchemaByNameParams{
		Context:                ctx,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewUpdateMetadataSchemaByNameParamsWithHTTPClient creates a new UpdateMetadataSchemaByNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateMetadataSchemaByNameParamsWithHTTPClient(client *http.Client) *UpdateMetadataSchemaByNameParams {
	return &UpdateMetadataSchemaByNameParams{
		HTTPClient:             client,
		AdditionalHeaderParams: make(map[string]string),
	}
}

/* UpdateMetadataSchemaByNameParams contains all the parameters to send to the API endpoint
   for the update metadata schema by name operation.

   Typically these are written to a http.Request.
*/
type UpdateMetadataSchemaByNameParams struct {

	/* IMXSignature.

	   String created by signing wallet address and timestamp
	*/
	IMXSignature string

	/* IMXTimestamp.

	   Unix Epoc timestamp
	*/
	IMXTimestamp string

	/* MetadataSchemaRequest.

	   update metadata schema
	*/
	MetadataSchemaRequest *models.MetadataSchemaRequest

	/* Address.

	   Collection contract address
	*/
	Address string

	/* Name.

	   Metadata schema name
	*/
	Name string

	AdditionalHeaderParams map[string]string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update metadata schema by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateMetadataSchemaByNameParams) WithDefaults() *UpdateMetadataSchemaByNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update metadata schema by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateMetadataSchemaByNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithTimeout(timeout time.Duration) *UpdateMetadataSchemaByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithContext(ctx context.Context) *UpdateMetadataSchemaByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// AddCustomHeader provides option to add custom header parameters to update metadata schema by name params.
func (o *UpdateMetadataSchemaByNameParams) AddCustomHeader(key string, value string) {
	o.AdditionalHeaderParams[key] = value
}

// WithHTTPClient adds the HTTPClient to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithHTTPClient(client *http.Client) *UpdateMetadataSchemaByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIMXSignature adds the iMXSignature to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithIMXSignature(iMXSignature string) *UpdateMetadataSchemaByNameParams {
	o.SetIMXSignature(iMXSignature)
	return o
}

// SetIMXSignature adds the iMXSignature to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetIMXSignature(iMXSignature string) {
	o.IMXSignature = iMXSignature
}

// WithIMXTimestamp adds the iMXTimestamp to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithIMXTimestamp(iMXTimestamp string) *UpdateMetadataSchemaByNameParams {
	o.SetIMXTimestamp(iMXTimestamp)
	return o
}

// SetIMXTimestamp adds the iMXTimestamp to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetIMXTimestamp(iMXTimestamp string) {
	o.IMXTimestamp = iMXTimestamp
}

// WithMetadataSchemaRequest adds the metadataSchemaRequest to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithMetadataSchemaRequest(metadataSchemaRequest *models.MetadataSchemaRequest) *UpdateMetadataSchemaByNameParams {
	o.SetMetadataSchemaRequest(metadataSchemaRequest)
	return o
}

// SetMetadataSchemaRequest adds the metadataSchemaRequest to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetMetadataSchemaRequest(metadataSchemaRequest *models.MetadataSchemaRequest) {
	o.MetadataSchemaRequest = metadataSchemaRequest
}

// WithAddress adds the address to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithAddress(address string) *UpdateMetadataSchemaByNameParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetAddress(address string) {
	o.Address = address
}

// WithName adds the name to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) WithName(name string) *UpdateMetadataSchemaByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the update metadata schema by name params
func (o *UpdateMetadataSchemaByNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateMetadataSchemaByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}

	if err := r.SetHeaderParam("x-sdk-version", "imx-core-sdk-golang-"); err != nil {
		return err
	}

	for key, val := range o.AdditionalHeaderParams {
		if err := r.SetHeaderParam(key, val); err != nil {
			return err
		}
	}

	var res []error

	// header param IMX-Signature
	if err := r.SetHeaderParam("IMX-Signature", o.IMXSignature); err != nil {
		return err
	}

	// header param IMX-Timestamp
	if err := r.SetHeaderParam("IMX-Timestamp", o.IMXTimestamp); err != nil {
		return err
	}
	if o.MetadataSchemaRequest != nil {
		if err := r.SetBodyParam(o.MetadataSchemaRequest); err != nil {
			return err
		}
	}

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
