// Code generated by go-swagger; DO NOT EDIT.

package trades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new trades API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for trades API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTrade(params *CreateTradeParams, opts ...ClientOption) (*CreateTradeOK, error)

	GetSignableTrade(params *GetSignableTradeParams, opts ...ClientOption) (*GetSignableTradeOK, error)

	GetTrade(params *GetTradeParams, opts ...ClientOption) (*GetTradeOK, error)

	ListTrades(params *ListTradesParams, opts ...ClientOption) (*ListTradesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTrade creates a trade between two parties

  Create a Trade
*/
func (a *Client) CreateTrade(params *CreateTradeParams, opts ...ClientOption) (*CreateTradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTrade",
		Method:             "POST",
		PathPattern:        "/v1/trades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSignableTrade gets details a signable trade v3

  Get details a signable trade V3
*/
func (a *Client) GetSignableTrade(params *GetSignableTradeParams, opts ...ClientOption) (*GetSignableTradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignableTradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSignableTrade",
		Method:             "POST",
		PathPattern:        "/v3/signable-trade-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignableTradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignableTradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSignableTrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTrade gets details of a trade with the given ID

  Get details of a trade with the given ID
*/
func (a *Client) GetTrade(params *GetTradeParams, opts ...ClientOption) (*GetTradeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTradeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTrade",
		Method:             "GET",
		PathPattern:        "/v1/trades/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTradeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTrade: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTrades gets a list of trades

  Get a list of trades
*/
func (a *Client) ListTrades(params *ListTradesParams, opts ...ClientOption) (*ListTradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTradesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTrades",
		Method:             "GET",
		PathPattern:        "/v1/trades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
