// Code generated by go-swagger; DO NOT EDIT.

package trades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListTradesParams creates a new ListTradesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTradesParams() *ListTradesParams {
	return &ListTradesParams{
		timeout:                cr.DefaultTimeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListTradesParamsWithTimeout creates a new ListTradesParams object
// with the ability to set a timeout on a request.
func NewListTradesParamsWithTimeout(timeout time.Duration) *ListTradesParams {
	return &ListTradesParams{
		timeout:                timeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListTradesParamsWithContext creates a new ListTradesParams object
// with the ability to set a context for a request.
func NewListTradesParamsWithContext(ctx context.Context) *ListTradesParams {
	return &ListTradesParams{
		Context:                ctx,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListTradesParamsWithHTTPClient creates a new ListTradesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTradesParamsWithHTTPClient(client *http.Client) *ListTradesParams {
	return &ListTradesParams{
		HTTPClient:             client,
		AdditionalHeaderParams: make(map[string]string),
	}
}

/* ListTradesParams contains all the parameters to send to the API endpoint
   for the list trades operation.

   Typically these are written to a http.Request.
*/
type ListTradesParams struct {

	/* Cursor.

	   Cursor
	*/
	Cursor *string

	/* Direction.

	   Direction to sort (asc/desc)
	*/
	Direction *string

	/* MaxTimestamp.

	   Maximum timestamp for this trade, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	MaxTimestamp *string

	/* MinTimestamp.

	   Minimum timestamp for this trade, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	MinTimestamp *string

	/* OrderBy.

	   Property to sort by
	*/
	OrderBy *string

	/* PageSize.

	   Page size of the result
	*/
	PageSize *int64

	/* PartyaTokenAddress.

	   Party A's sell token address
	*/
	PartyaTokenAddress *string

	/* PartyaTokenID.

	   Party A's sell token id
	*/
	PartyaTokenID *string

	/* PartyaTokenType.

	   Party A's sell token type
	*/
	PartyaTokenType *string

	/* PartybTokenAddress.

	   Party B's sell token address
	*/
	PartybTokenAddress *string

	/* PartybTokenID.

	   Party B's sell token id
	*/
	PartybTokenID *string

	/* PartybTokenType.

	   Party B's sell token type
	*/
	PartybTokenType *string

	AdditionalHeaderParams map[string]string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list trades params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTradesParams) WithDefaults() *ListTradesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list trades params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTradesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list trades params
func (o *ListTradesParams) WithTimeout(timeout time.Duration) *ListTradesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list trades params
func (o *ListTradesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list trades params
func (o *ListTradesParams) WithContext(ctx context.Context) *ListTradesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list trades params
func (o *ListTradesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// AddCustomHeader provides option to add custom header parameters to list trades params.
func (o *ListTradesParams) AddCustomHeader(key string, value string) {
	o.AdditionalHeaderParams[key] = value
}

// WithHTTPClient adds the HTTPClient to the list trades params
func (o *ListTradesParams) WithHTTPClient(client *http.Client) *ListTradesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list trades params
func (o *ListTradesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the list trades params
func (o *ListTradesParams) WithCursor(cursor *string) *ListTradesParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list trades params
func (o *ListTradesParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDirection adds the direction to the list trades params
func (o *ListTradesParams) WithDirection(direction *string) *ListTradesParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the list trades params
func (o *ListTradesParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithMaxTimestamp adds the maxTimestamp to the list trades params
func (o *ListTradesParams) WithMaxTimestamp(maxTimestamp *string) *ListTradesParams {
	o.SetMaxTimestamp(maxTimestamp)
	return o
}

// SetMaxTimestamp adds the maxTimestamp to the list trades params
func (o *ListTradesParams) SetMaxTimestamp(maxTimestamp *string) {
	o.MaxTimestamp = maxTimestamp
}

// WithMinTimestamp adds the minTimestamp to the list trades params
func (o *ListTradesParams) WithMinTimestamp(minTimestamp *string) *ListTradesParams {
	o.SetMinTimestamp(minTimestamp)
	return o
}

// SetMinTimestamp adds the minTimestamp to the list trades params
func (o *ListTradesParams) SetMinTimestamp(minTimestamp *string) {
	o.MinTimestamp = minTimestamp
}

// WithOrderBy adds the orderBy to the list trades params
func (o *ListTradesParams) WithOrderBy(orderBy *string) *ListTradesParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list trades params
func (o *ListTradesParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageSize adds the pageSize to the list trades params
func (o *ListTradesParams) WithPageSize(pageSize *int64) *ListTradesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list trades params
func (o *ListTradesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPartyaTokenAddress adds the partyaTokenAddress to the list trades params
func (o *ListTradesParams) WithPartyaTokenAddress(partyaTokenAddress *string) *ListTradesParams {
	o.SetPartyaTokenAddress(partyaTokenAddress)
	return o
}

// SetPartyaTokenAddress adds the partyATokenAddress to the list trades params
func (o *ListTradesParams) SetPartyaTokenAddress(partyaTokenAddress *string) {
	o.PartyaTokenAddress = partyaTokenAddress
}

// WithPartyaTokenID adds the partyaTokenID to the list trades params
func (o *ListTradesParams) WithPartyaTokenID(partyaTokenID *string) *ListTradesParams {
	o.SetPartyaTokenID(partyaTokenID)
	return o
}

// SetPartyaTokenID adds the partyATokenId to the list trades params
func (o *ListTradesParams) SetPartyaTokenID(partyaTokenID *string) {
	o.PartyaTokenID = partyaTokenID
}

// WithPartyaTokenType adds the partyaTokenType to the list trades params
func (o *ListTradesParams) WithPartyaTokenType(partyaTokenType *string) *ListTradesParams {
	o.SetPartyaTokenType(partyaTokenType)
	return o
}

// SetPartyaTokenType adds the partyATokenType to the list trades params
func (o *ListTradesParams) SetPartyaTokenType(partyaTokenType *string) {
	o.PartyaTokenType = partyaTokenType
}

// WithPartybTokenAddress adds the partybTokenAddress to the list trades params
func (o *ListTradesParams) WithPartybTokenAddress(partybTokenAddress *string) *ListTradesParams {
	o.SetPartybTokenAddress(partybTokenAddress)
	return o
}

// SetPartybTokenAddress adds the partyBTokenAddress to the list trades params
func (o *ListTradesParams) SetPartybTokenAddress(partybTokenAddress *string) {
	o.PartybTokenAddress = partybTokenAddress
}

// WithPartybTokenID adds the partybTokenID to the list trades params
func (o *ListTradesParams) WithPartybTokenID(partybTokenID *string) *ListTradesParams {
	o.SetPartybTokenID(partybTokenID)
	return o
}

// SetPartybTokenID adds the partyBTokenId to the list trades params
func (o *ListTradesParams) SetPartybTokenID(partybTokenID *string) {
	o.PartybTokenID = partybTokenID
}

// WithPartybTokenType adds the partybTokenType to the list trades params
func (o *ListTradesParams) WithPartybTokenType(partybTokenType *string) *ListTradesParams {
	o.SetPartybTokenType(partybTokenType)
	return o
}

// SetPartybTokenType adds the partyBTokenType to the list trades params
func (o *ListTradesParams) SetPartybTokenType(partybTokenType *string) {
	o.PartybTokenType = partybTokenType
}

// WriteToRequest writes these params to a swagger request
func (o *ListTradesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}

	if err := r.SetHeaderParam("x-sdk-version", "imx-core-sdk-golang-"); err != nil {
		return err
	}

	for key, val := range o.AdditionalHeaderParams {
		if err := r.SetHeaderParam(key, val); err != nil {
			return err
		}
	}

	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	if o.MaxTimestamp != nil {

		// query param max_timestamp
		var qrMaxTimestamp string

		if o.MaxTimestamp != nil {
			qrMaxTimestamp = *o.MaxTimestamp
		}
		qMaxTimestamp := qrMaxTimestamp
		if qMaxTimestamp != "" {

			if err := r.SetQueryParam("max_timestamp", qMaxTimestamp); err != nil {
				return err
			}
		}
	}

	if o.MinTimestamp != nil {

		// query param min_timestamp
		var qrMinTimestamp string

		if o.MinTimestamp != nil {
			qrMinTimestamp = *o.MinTimestamp
		}
		qMinTimestamp := qrMinTimestamp
		if qMinTimestamp != "" {

			if err := r.SetQueryParam("min_timestamp", qMinTimestamp); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PartyaTokenAddress != nil {

		// query param party_a_token_address
		var qrPartyaTokenAddress string

		if o.PartyaTokenAddress != nil {
			qrPartyaTokenAddress = *o.PartyaTokenAddress
		}
		qPartyaTokenAddress := qrPartyaTokenAddress
		if qPartyaTokenAddress != "" {

			if err := r.SetQueryParam("party_a_token_address", qPartyaTokenAddress); err != nil {
				return err
			}
		}
	}

	if o.PartyaTokenID != nil {

		// query param party_a_token_id
		var qrPartyaTokenID string

		if o.PartyaTokenID != nil {
			qrPartyaTokenID = *o.PartyaTokenID
		}
		qPartyaTokenID := qrPartyaTokenID
		if qPartyaTokenID != "" {

			if err := r.SetQueryParam("party_a_token_id", qPartyaTokenID); err != nil {
				return err
			}
		}
	}

	if o.PartyaTokenType != nil {

		// query param party_a_token_type
		var qrPartyaTokenType string

		if o.PartyaTokenType != nil {
			qrPartyaTokenType = *o.PartyaTokenType
		}
		qPartyaTokenType := qrPartyaTokenType
		if qPartyaTokenType != "" {

			if err := r.SetQueryParam("party_a_token_type", qPartyaTokenType); err != nil {
				return err
			}
		}
	}

	if o.PartybTokenAddress != nil {

		// query param party_b_token_address
		var qrPartybTokenAddress string

		if o.PartybTokenAddress != nil {
			qrPartybTokenAddress = *o.PartybTokenAddress
		}
		qPartybTokenAddress := qrPartybTokenAddress
		if qPartybTokenAddress != "" {

			if err := r.SetQueryParam("party_b_token_address", qPartybTokenAddress); err != nil {
				return err
			}
		}
	}

	if o.PartybTokenID != nil {

		// query param party_b_token_id
		var qrPartybTokenID string

		if o.PartybTokenID != nil {
			qrPartybTokenID = *o.PartybTokenID
		}
		qPartybTokenID := qrPartybTokenID
		if qPartybTokenID != "" {

			if err := r.SetQueryParam("party_b_token_id", qPartybTokenID); err != nil {
				return err
			}
		}
	}

	if o.PartybTokenType != nil {

		// query param party_b_token_type
		var qrPartybTokenType string

		if o.PartybTokenType != nil {
			qrPartybTokenType = *o.PartybTokenType
		}
		qPartybTokenType := qrPartybTokenType
		if qPartybTokenType != "" {

			if err := r.SetQueryParam("party_b_token_type", qPartybTokenType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
