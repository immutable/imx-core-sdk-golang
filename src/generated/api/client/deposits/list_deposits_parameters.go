// Code generated by go-swagger; DO NOT EDIT.

package deposits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListDepositsParams creates a new ListDepositsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListDepositsParams() *ListDepositsParams {
	return &ListDepositsParams{
		timeout:                cr.DefaultTimeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListDepositsParamsWithTimeout creates a new ListDepositsParams object
// with the ability to set a timeout on a request.
func NewListDepositsParamsWithTimeout(timeout time.Duration) *ListDepositsParams {
	return &ListDepositsParams{
		timeout:                timeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListDepositsParamsWithContext creates a new ListDepositsParams object
// with the ability to set a context for a request.
func NewListDepositsParamsWithContext(ctx context.Context) *ListDepositsParams {
	return &ListDepositsParams{
		Context:                ctx,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListDepositsParamsWithHTTPClient creates a new ListDepositsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListDepositsParamsWithHTTPClient(client *http.Client) *ListDepositsParams {
	return &ListDepositsParams{
		HTTPClient:             client,
		AdditionalHeaderParams: make(map[string]string),
	}
}

/* ListDepositsParams contains all the parameters to send to the API endpoint
   for the list deposits operation.

   Typically these are written to a http.Request.
*/
type ListDepositsParams struct {

	/* AssetID.

	   Internal IMX ID of the minted asset
	*/
	AssetID *string

	/* Cursor.

	   Cursor
	*/
	Cursor *string

	/* Direction.

	   Direction to sort (asc/desc)
	*/
	Direction *string

	/* MaxQuantity.

	   Max quantity for the deposited asset
	*/
	MaxQuantity *string

	/* Metadata.

	   JSON-encoded metadata filters for the deposited asset
	*/
	Metadata *string

	/* MinQuantity.

	   Min quantity for the deposited asset
	*/
	MinQuantity *string

	/* OrderBy.

	   Property to sort by
	*/
	OrderBy *string

	/* PageSize.

	   Page size of the result
	*/
	PageSize *int64

	/* Status.

	   Status of this deposit
	*/
	Status *string

	/* TokenAddress.

	   Token address of the deposited asset
	*/
	TokenAddress *string

	/* TokenID.

	   ERC721 Token ID of the minted asset
	*/
	TokenID *string

	/* TokenName.

	   Token name of the deposited asset
	*/
	TokenName *string

	/* TokenType.

	   Token type of the deposited asset
	*/
	TokenType *string

	/* UpdatedMaxTimestamp.

	   Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	UpdatedMaxTimestamp *string

	/* UpdatedMinTimestamp.

	   Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	UpdatedMinTimestamp *string

	/* User.

	   Ethereum address of the user who submitted this deposit
	*/
	User *string

	AdditionalHeaderParams map[string]string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list deposits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDepositsParams) WithDefaults() *ListDepositsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list deposits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListDepositsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list deposits params
func (o *ListDepositsParams) WithTimeout(timeout time.Duration) *ListDepositsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list deposits params
func (o *ListDepositsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list deposits params
func (o *ListDepositsParams) WithContext(ctx context.Context) *ListDepositsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list deposits params
func (o *ListDepositsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// AddCustomHeader provides option to add custom header parameters to list deposits params.
func (o *ListDepositsParams) AddCustomHeader(key string, value string) {
	o.AdditionalHeaderParams[key] = value
}

// WithHTTPClient adds the HTTPClient to the list deposits params
func (o *ListDepositsParams) WithHTTPClient(client *http.Client) *ListDepositsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list deposits params
func (o *ListDepositsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetID adds the assetID to the list deposits params
func (o *ListDepositsParams) WithAssetID(assetID *string) *ListDepositsParams {
	o.SetAssetID(assetID)
	return o
}

// SetAssetID adds the assetId to the list deposits params
func (o *ListDepositsParams) SetAssetID(assetID *string) {
	o.AssetID = assetID
}

// WithCursor adds the cursor to the list deposits params
func (o *ListDepositsParams) WithCursor(cursor *string) *ListDepositsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list deposits params
func (o *ListDepositsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDirection adds the direction to the list deposits params
func (o *ListDepositsParams) WithDirection(direction *string) *ListDepositsParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the list deposits params
func (o *ListDepositsParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithMaxQuantity adds the maxQuantity to the list deposits params
func (o *ListDepositsParams) WithMaxQuantity(maxQuantity *string) *ListDepositsParams {
	o.SetMaxQuantity(maxQuantity)
	return o
}

// SetMaxQuantity adds the maxQuantity to the list deposits params
func (o *ListDepositsParams) SetMaxQuantity(maxQuantity *string) {
	o.MaxQuantity = maxQuantity
}

// WithMetadata adds the metadata to the list deposits params
func (o *ListDepositsParams) WithMetadata(metadata *string) *ListDepositsParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the list deposits params
func (o *ListDepositsParams) SetMetadata(metadata *string) {
	o.Metadata = metadata
}

// WithMinQuantity adds the minQuantity to the list deposits params
func (o *ListDepositsParams) WithMinQuantity(minQuantity *string) *ListDepositsParams {
	o.SetMinQuantity(minQuantity)
	return o
}

// SetMinQuantity adds the minQuantity to the list deposits params
func (o *ListDepositsParams) SetMinQuantity(minQuantity *string) {
	o.MinQuantity = minQuantity
}

// WithOrderBy adds the orderBy to the list deposits params
func (o *ListDepositsParams) WithOrderBy(orderBy *string) *ListDepositsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list deposits params
func (o *ListDepositsParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageSize adds the pageSize to the list deposits params
func (o *ListDepositsParams) WithPageSize(pageSize *int64) *ListDepositsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list deposits params
func (o *ListDepositsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithStatus adds the status to the list deposits params
func (o *ListDepositsParams) WithStatus(status *string) *ListDepositsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list deposits params
func (o *ListDepositsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTokenAddress adds the tokenAddress to the list deposits params
func (o *ListDepositsParams) WithTokenAddress(tokenAddress *string) *ListDepositsParams {
	o.SetTokenAddress(tokenAddress)
	return o
}

// SetTokenAddress adds the tokenAddress to the list deposits params
func (o *ListDepositsParams) SetTokenAddress(tokenAddress *string) {
	o.TokenAddress = tokenAddress
}

// WithTokenID adds the tokenID to the list deposits params
func (o *ListDepositsParams) WithTokenID(tokenID *string) *ListDepositsParams {
	o.SetTokenID(tokenID)
	return o
}

// SetTokenID adds the tokenId to the list deposits params
func (o *ListDepositsParams) SetTokenID(tokenID *string) {
	o.TokenID = tokenID
}

// WithTokenName adds the tokenName to the list deposits params
func (o *ListDepositsParams) WithTokenName(tokenName *string) *ListDepositsParams {
	o.SetTokenName(tokenName)
	return o
}

// SetTokenName adds the tokenName to the list deposits params
func (o *ListDepositsParams) SetTokenName(tokenName *string) {
	o.TokenName = tokenName
}

// WithTokenType adds the tokenType to the list deposits params
func (o *ListDepositsParams) WithTokenType(tokenType *string) *ListDepositsParams {
	o.SetTokenType(tokenType)
	return o
}

// SetTokenType adds the tokenType to the list deposits params
func (o *ListDepositsParams) SetTokenType(tokenType *string) {
	o.TokenType = tokenType
}

// WithUpdatedMaxTimestamp adds the updatedMaxTimestamp to the list deposits params
func (o *ListDepositsParams) WithUpdatedMaxTimestamp(updatedMaxTimestamp *string) *ListDepositsParams {
	o.SetUpdatedMaxTimestamp(updatedMaxTimestamp)
	return o
}

// SetUpdatedMaxTimestamp adds the updatedMaxTimestamp to the list deposits params
func (o *ListDepositsParams) SetUpdatedMaxTimestamp(updatedMaxTimestamp *string) {
	o.UpdatedMaxTimestamp = updatedMaxTimestamp
}

// WithUpdatedMinTimestamp adds the updatedMinTimestamp to the list deposits params
func (o *ListDepositsParams) WithUpdatedMinTimestamp(updatedMinTimestamp *string) *ListDepositsParams {
	o.SetUpdatedMinTimestamp(updatedMinTimestamp)
	return o
}

// SetUpdatedMinTimestamp adds the updatedMinTimestamp to the list deposits params
func (o *ListDepositsParams) SetUpdatedMinTimestamp(updatedMinTimestamp *string) {
	o.UpdatedMinTimestamp = updatedMinTimestamp
}

// WithUser adds the user to the list deposits params
func (o *ListDepositsParams) WithUser(user *string) *ListDepositsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the list deposits params
func (o *ListDepositsParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *ListDepositsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}

	for key, val := range o.AdditionalHeaderParams {
		if err := r.SetHeaderParam(key, val); err != nil {
			return err
		}
	}

	// Add SDK version header.
	if err := r.SetHeaderParam("x-sdk-version", "imx-core-sdk-golang-0.1.0"); err != nil {
		return err
	}

	var res []error

	if o.AssetID != nil {

		// query param asset_id
		var qrAssetID string

		if o.AssetID != nil {
			qrAssetID = *o.AssetID
		}
		qAssetID := qrAssetID
		if qAssetID != "" {

			if err := r.SetQueryParam("asset_id", qAssetID); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	if o.MaxQuantity != nil {

		// query param max_quantity
		var qrMaxQuantity string

		if o.MaxQuantity != nil {
			qrMaxQuantity = *o.MaxQuantity
		}
		qMaxQuantity := qrMaxQuantity
		if qMaxQuantity != "" {

			if err := r.SetQueryParam("max_quantity", qMaxQuantity); err != nil {
				return err
			}
		}
	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata string

		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := qrMetadata
		if qMetadata != "" {

			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}
	}

	if o.MinQuantity != nil {

		// query param min_quantity
		var qrMinQuantity string

		if o.MinQuantity != nil {
			qrMinQuantity = *o.MinQuantity
		}
		qMinQuantity := qrMinQuantity
		if qMinQuantity != "" {

			if err := r.SetQueryParam("min_quantity", qMinQuantity); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.TokenAddress != nil {

		// query param token_address
		var qrTokenAddress string

		if o.TokenAddress != nil {
			qrTokenAddress = *o.TokenAddress
		}
		qTokenAddress := qrTokenAddress
		if qTokenAddress != "" {

			if err := r.SetQueryParam("token_address", qTokenAddress); err != nil {
				return err
			}
		}
	}

	if o.TokenID != nil {

		// query param token_id
		var qrTokenID string

		if o.TokenID != nil {
			qrTokenID = *o.TokenID
		}
		qTokenID := qrTokenID
		if qTokenID != "" {

			if err := r.SetQueryParam("token_id", qTokenID); err != nil {
				return err
			}
		}
	}

	if o.TokenName != nil {

		// query param token_name
		var qrTokenName string

		if o.TokenName != nil {
			qrTokenName = *o.TokenName
		}
		qTokenName := qrTokenName
		if qTokenName != "" {

			if err := r.SetQueryParam("token_name", qTokenName); err != nil {
				return err
			}
		}
	}

	if o.TokenType != nil {

		// query param token_type
		var qrTokenType string

		if o.TokenType != nil {
			qrTokenType = *o.TokenType
		}
		qTokenType := qrTokenType
		if qTokenType != "" {

			if err := r.SetQueryParam("token_type", qTokenType); err != nil {
				return err
			}
		}
	}

	if o.UpdatedMaxTimestamp != nil {

		// query param updated_max_timestamp
		var qrUpdatedMaxTimestamp string

		if o.UpdatedMaxTimestamp != nil {
			qrUpdatedMaxTimestamp = *o.UpdatedMaxTimestamp
		}
		qUpdatedMaxTimestamp := qrUpdatedMaxTimestamp
		if qUpdatedMaxTimestamp != "" {

			if err := r.SetQueryParam("updated_max_timestamp", qUpdatedMaxTimestamp); err != nil {
				return err
			}
		}
	}

	if o.UpdatedMinTimestamp != nil {

		// query param updated_min_timestamp
		var qrUpdatedMinTimestamp string

		if o.UpdatedMinTimestamp != nil {
			qrUpdatedMinTimestamp = *o.UpdatedMinTimestamp
		}
		qUpdatedMinTimestamp := qrUpdatedMinTimestamp
		if qUpdatedMinTimestamp != "" {

			if err := r.SetQueryParam("updated_min_timestamp", qUpdatedMinTimestamp); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
