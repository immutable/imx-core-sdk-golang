// Code generated by go-swagger; DO NOT EDIT.

package assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAssetsParams creates a new ListAssetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAssetsParams() *ListAssetsParams {
	return &ListAssetsParams{
		timeout:                cr.DefaultTimeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListAssetsParamsWithTimeout creates a new ListAssetsParams object
// with the ability to set a timeout on a request.
func NewListAssetsParamsWithTimeout(timeout time.Duration) *ListAssetsParams {
	return &ListAssetsParams{
		timeout:                timeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListAssetsParamsWithContext creates a new ListAssetsParams object
// with the ability to set a context for a request.
func NewListAssetsParamsWithContext(ctx context.Context) *ListAssetsParams {
	return &ListAssetsParams{
		Context:                ctx,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewListAssetsParamsWithHTTPClient creates a new ListAssetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAssetsParamsWithHTTPClient(client *http.Client) *ListAssetsParams {
	return &ListAssetsParams{
		HTTPClient:             client,
		AdditionalHeaderParams: make(map[string]string),
	}
}

/* ListAssetsParams contains all the parameters to send to the API endpoint
   for the list assets operation.

   Typically these are written to a http.Request.
*/
type ListAssetsParams struct {

	/* AuxiliaryFeePercentages.

	   Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients
	*/
	AuxiliaryFeePercentages *string

	/* AuxiliaryFeeRecipients.

	   Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages
	*/
	AuxiliaryFeeRecipients *string

	/* BuyOrders.

	   Set flag to true to fetch an array of buy order details  with accepted status associated with the asset
	*/
	BuyOrders *bool

	/* Collection.

	   Collection contract address
	*/
	Collection *string

	/* Cursor.

	   Cursor
	*/
	Cursor *string

	/* Direction.

	   Direction to sort (asc/desc)
	*/
	Direction *string

	/* IncludeFees.

	   Set flag to include fees associated with the asset
	*/
	IncludeFees *bool

	/* Metadata.

	   JSON-encoded metadata filters for these asset. Example: {'proto':['1147'],'quality':['Meteorite']}
	*/
	Metadata *string

	/* Name.

	   Name of the asset to search
	*/
	Name *string

	/* OrderBy.

	   Property to sort by
	*/
	OrderBy *string

	/* PageSize.

	   Page size of the result
	*/
	PageSize *int64

	/* SellOrders.

	   Set flag to true to fetch an array of sell order details with accepted status associated with the asset
	*/
	SellOrders *bool

	/* Status.

	   Status of these assets
	*/
	Status *string

	/* UpdatedMaxTimestamp.

	   Maximum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	UpdatedMaxTimestamp *string

	/* UpdatedMinTimestamp.

	   Minimum timestamp for when these assets were last updated, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	UpdatedMinTimestamp *string

	/* User.

	   Ethereum address of the user who owns these assets
	*/
	User *string

	AdditionalHeaderParams map[string]string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list assets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAssetsParams) WithDefaults() *ListAssetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list assets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAssetsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list assets params
func (o *ListAssetsParams) WithTimeout(timeout time.Duration) *ListAssetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list assets params
func (o *ListAssetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list assets params
func (o *ListAssetsParams) WithContext(ctx context.Context) *ListAssetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list assets params
func (o *ListAssetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// AddCustomHeader provides option to add custom header parameters to list assets params.
func (o *ListAssetsParams) AddCustomHeader(key string, value string) {
	o.AdditionalHeaderParams[key] = value
}

// WithHTTPClient adds the HTTPClient to the list assets params
func (o *ListAssetsParams) WithHTTPClient(client *http.Client) *ListAssetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list assets params
func (o *ListAssetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuxiliaryFeePercentages adds the auxiliaryFeePercentages to the list assets params
func (o *ListAssetsParams) WithAuxiliaryFeePercentages(auxiliaryFeePercentages *string) *ListAssetsParams {
	o.SetAuxiliaryFeePercentages(auxiliaryFeePercentages)
	return o
}

// SetAuxiliaryFeePercentages adds the auxiliaryFeePercentages to the list assets params
func (o *ListAssetsParams) SetAuxiliaryFeePercentages(auxiliaryFeePercentages *string) {
	o.AuxiliaryFeePercentages = auxiliaryFeePercentages
}

// WithAuxiliaryFeeRecipients adds the auxiliaryFeeRecipients to the list assets params
func (o *ListAssetsParams) WithAuxiliaryFeeRecipients(auxiliaryFeeRecipients *string) *ListAssetsParams {
	o.SetAuxiliaryFeeRecipients(auxiliaryFeeRecipients)
	return o
}

// SetAuxiliaryFeeRecipients adds the auxiliaryFeeRecipients to the list assets params
func (o *ListAssetsParams) SetAuxiliaryFeeRecipients(auxiliaryFeeRecipients *string) {
	o.AuxiliaryFeeRecipients = auxiliaryFeeRecipients
}

// WithBuyOrders adds the buyOrders to the list assets params
func (o *ListAssetsParams) WithBuyOrders(buyOrders *bool) *ListAssetsParams {
	o.SetBuyOrders(buyOrders)
	return o
}

// SetBuyOrders adds the buyOrders to the list assets params
func (o *ListAssetsParams) SetBuyOrders(buyOrders *bool) {
	o.BuyOrders = buyOrders
}

// WithCollection adds the collection to the list assets params
func (o *ListAssetsParams) WithCollection(collection *string) *ListAssetsParams {
	o.SetCollection(collection)
	return o
}

// SetCollection adds the collection to the list assets params
func (o *ListAssetsParams) SetCollection(collection *string) {
	o.Collection = collection
}

// WithCursor adds the cursor to the list assets params
func (o *ListAssetsParams) WithCursor(cursor *string) *ListAssetsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list assets params
func (o *ListAssetsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDirection adds the direction to the list assets params
func (o *ListAssetsParams) WithDirection(direction *string) *ListAssetsParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the list assets params
func (o *ListAssetsParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithIncludeFees adds the includeFees to the list assets params
func (o *ListAssetsParams) WithIncludeFees(includeFees *bool) *ListAssetsParams {
	o.SetIncludeFees(includeFees)
	return o
}

// SetIncludeFees adds the includeFees to the list assets params
func (o *ListAssetsParams) SetIncludeFees(includeFees *bool) {
	o.IncludeFees = includeFees
}

// WithMetadata adds the metadata to the list assets params
func (o *ListAssetsParams) WithMetadata(metadata *string) *ListAssetsParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the list assets params
func (o *ListAssetsParams) SetMetadata(metadata *string) {
	o.Metadata = metadata
}

// WithName adds the name to the list assets params
func (o *ListAssetsParams) WithName(name *string) *ListAssetsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list assets params
func (o *ListAssetsParams) SetName(name *string) {
	o.Name = name
}

// WithOrderBy adds the orderBy to the list assets params
func (o *ListAssetsParams) WithOrderBy(orderBy *string) *ListAssetsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list assets params
func (o *ListAssetsParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageSize adds the pageSize to the list assets params
func (o *ListAssetsParams) WithPageSize(pageSize *int64) *ListAssetsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list assets params
func (o *ListAssetsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSellOrders adds the sellOrders to the list assets params
func (o *ListAssetsParams) WithSellOrders(sellOrders *bool) *ListAssetsParams {
	o.SetSellOrders(sellOrders)
	return o
}

// SetSellOrders adds the sellOrders to the list assets params
func (o *ListAssetsParams) SetSellOrders(sellOrders *bool) {
	o.SellOrders = sellOrders
}

// WithStatus adds the status to the list assets params
func (o *ListAssetsParams) WithStatus(status *string) *ListAssetsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list assets params
func (o *ListAssetsParams) SetStatus(status *string) {
	o.Status = status
}

// WithUpdatedMaxTimestamp adds the updatedMaxTimestamp to the list assets params
func (o *ListAssetsParams) WithUpdatedMaxTimestamp(updatedMaxTimestamp *string) *ListAssetsParams {
	o.SetUpdatedMaxTimestamp(updatedMaxTimestamp)
	return o
}

// SetUpdatedMaxTimestamp adds the updatedMaxTimestamp to the list assets params
func (o *ListAssetsParams) SetUpdatedMaxTimestamp(updatedMaxTimestamp *string) {
	o.UpdatedMaxTimestamp = updatedMaxTimestamp
}

// WithUpdatedMinTimestamp adds the updatedMinTimestamp to the list assets params
func (o *ListAssetsParams) WithUpdatedMinTimestamp(updatedMinTimestamp *string) *ListAssetsParams {
	o.SetUpdatedMinTimestamp(updatedMinTimestamp)
	return o
}

// SetUpdatedMinTimestamp adds the updatedMinTimestamp to the list assets params
func (o *ListAssetsParams) SetUpdatedMinTimestamp(updatedMinTimestamp *string) {
	o.UpdatedMinTimestamp = updatedMinTimestamp
}

// WithUser adds the user to the list assets params
func (o *ListAssetsParams) WithUser(user *string) *ListAssetsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the list assets params
func (o *ListAssetsParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *ListAssetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}

	for key, val := range o.AdditionalHeaderParams {
		if err := r.SetHeaderParam(key, val); err != nil {
			return err
		}
	}

	// Add SDK version header.
	if err := r.SetHeaderParam("x-sdk-version", "imx-core-sdk-golang-0.1.0"); err != nil {
		return err
	}

	var res []error

	if o.AuxiliaryFeePercentages != nil {

		// query param auxiliary_fee_percentages
		var qrAuxiliaryFeePercentages string

		if o.AuxiliaryFeePercentages != nil {
			qrAuxiliaryFeePercentages = *o.AuxiliaryFeePercentages
		}
		qAuxiliaryFeePercentages := qrAuxiliaryFeePercentages
		if qAuxiliaryFeePercentages != "" {

			if err := r.SetQueryParam("auxiliary_fee_percentages", qAuxiliaryFeePercentages); err != nil {
				return err
			}
		}
	}

	if o.AuxiliaryFeeRecipients != nil {

		// query param auxiliary_fee_recipients
		var qrAuxiliaryFeeRecipients string

		if o.AuxiliaryFeeRecipients != nil {
			qrAuxiliaryFeeRecipients = *o.AuxiliaryFeeRecipients
		}
		qAuxiliaryFeeRecipients := qrAuxiliaryFeeRecipients
		if qAuxiliaryFeeRecipients != "" {

			if err := r.SetQueryParam("auxiliary_fee_recipients", qAuxiliaryFeeRecipients); err != nil {
				return err
			}
		}
	}

	if o.BuyOrders != nil {

		// query param buy_orders
		var qrBuyOrders bool

		if o.BuyOrders != nil {
			qrBuyOrders = *o.BuyOrders
		}
		qBuyOrders := swag.FormatBool(qrBuyOrders)
		if qBuyOrders != "" {

			if err := r.SetQueryParam("buy_orders", qBuyOrders); err != nil {
				return err
			}
		}
	}

	if o.Collection != nil {

		// query param collection
		var qrCollection string

		if o.Collection != nil {
			qrCollection = *o.Collection
		}
		qCollection := qrCollection
		if qCollection != "" {

			if err := r.SetQueryParam("collection", qCollection); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	if o.IncludeFees != nil {

		// query param include_fees
		var qrIncludeFees bool

		if o.IncludeFees != nil {
			qrIncludeFees = *o.IncludeFees
		}
		qIncludeFees := swag.FormatBool(qrIncludeFees)
		if qIncludeFees != "" {

			if err := r.SetQueryParam("include_fees", qIncludeFees); err != nil {
				return err
			}
		}
	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata string

		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := qrMetadata
		if qMetadata != "" {

			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.SellOrders != nil {

		// query param sell_orders
		var qrSellOrders bool

		if o.SellOrders != nil {
			qrSellOrders = *o.SellOrders
		}
		qSellOrders := swag.FormatBool(qrSellOrders)
		if qSellOrders != "" {

			if err := r.SetQueryParam("sell_orders", qSellOrders); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.UpdatedMaxTimestamp != nil {

		// query param updated_max_timestamp
		var qrUpdatedMaxTimestamp string

		if o.UpdatedMaxTimestamp != nil {
			qrUpdatedMaxTimestamp = *o.UpdatedMaxTimestamp
		}
		qUpdatedMaxTimestamp := qrUpdatedMaxTimestamp
		if qUpdatedMaxTimestamp != "" {

			if err := r.SetQueryParam("updated_max_timestamp", qUpdatedMaxTimestamp); err != nil {
				return err
			}
		}
	}

	if o.UpdatedMinTimestamp != nil {

		// query param updated_min_timestamp
		var qrUpdatedMinTimestamp string

		if o.UpdatedMinTimestamp != nil {
			qrUpdatedMinTimestamp = *o.UpdatedMinTimestamp
		}
		qUpdatedMinTimestamp := qrUpdatedMinTimestamp
		if qUpdatedMinTimestamp != "" {

			if err := r.SetQueryParam("updated_min_timestamp", qUpdatedMinTimestamp); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
