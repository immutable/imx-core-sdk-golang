// Code generated by go-swagger; DO NOT EDIT.

package withdrawals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new withdrawals API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for withdrawals API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWithdrawal(params *CreateWithdrawalParams, opts ...ClientOption) (*CreateWithdrawalOK, error)

	GetSignableWithdrawal(params *GetSignableWithdrawalParams, opts ...ClientOption) (*GetSignableWithdrawalOK, error)

	GetWithdrawal(params *GetWithdrawalParams, opts ...ClientOption) (*GetWithdrawalOK, error)

	ListWithdrawals(params *ListWithdrawalsParams, opts ...ClientOption) (*ListWithdrawalsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateWithdrawal creates a withdrawal of a token

  Creates a withdrawal
*/
func (a *Client) CreateWithdrawal(params *CreateWithdrawalParams, opts ...ClientOption) (*CreateWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWithdrawalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWithdrawal",
		Method:             "POST",
		PathPattern:        "/v1/withdrawals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWithdrawalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWithdrawal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSignableWithdrawal gets details of a signable withdrawal

  Gets details of a signable withdrawal
*/
func (a *Client) GetSignableWithdrawal(params *GetSignableWithdrawalParams, opts ...ClientOption) (*GetSignableWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignableWithdrawalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSignableWithdrawal",
		Method:             "POST",
		PathPattern:        "/v1/signable-withdrawal-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignableWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignableWithdrawalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSignableWithdrawal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWithdrawal gets details of withdrawal with the given ID

  Gets details of withdrawal with the given ID
*/
func (a *Client) GetWithdrawal(params *GetWithdrawalParams, opts ...ClientOption) (*GetWithdrawalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWithdrawalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWithdrawal",
		Method:             "GET",
		PathPattern:        "/v1/withdrawals/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWithdrawalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWithdrawalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWithdrawal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListWithdrawals gets a list of withdrawals

  Get a list of withdrawals
*/
func (a *Client) ListWithdrawals(params *ListWithdrawalsParams, opts ...ClientOption) (*ListWithdrawalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWithdrawalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWithdrawals",
		Method:             "GET",
		PathPattern:        "/v1/withdrawals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWithdrawalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWithdrawalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listWithdrawals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
