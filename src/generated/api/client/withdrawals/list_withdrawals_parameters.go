// Code generated by go-swagger; DO NOT EDIT.

package withdrawals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListWithdrawalsParams creates a new ListWithdrawalsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListWithdrawalsParams() *ListWithdrawalsParams {
	return &ListWithdrawalsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListWithdrawalsParamsWithTimeout creates a new ListWithdrawalsParams object
// with the ability to set a timeout on a request.
func NewListWithdrawalsParamsWithTimeout(timeout time.Duration) *ListWithdrawalsParams {
	return &ListWithdrawalsParams{
		timeout: timeout,
	}
}

// NewListWithdrawalsParamsWithContext creates a new ListWithdrawalsParams object
// with the ability to set a context for a request.
func NewListWithdrawalsParamsWithContext(ctx context.Context) *ListWithdrawalsParams {
	return &ListWithdrawalsParams{
		Context: ctx,
	}
}

// NewListWithdrawalsParamsWithHTTPClient creates a new ListWithdrawalsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListWithdrawalsParamsWithHTTPClient(client *http.Client) *ListWithdrawalsParams {
	return &ListWithdrawalsParams{
		HTTPClient: client,
	}
}

/* ListWithdrawalsParams contains all the parameters to send to the API endpoint
   for the list withdrawals operation.

   Typically these are written to a http.Request.
*/
type ListWithdrawalsParams struct {

	/* AssetID.

	   Internal IMX ID of the minted asset
	*/
	AssetID *string

	/* Cursor.

	   Cursor
	*/
	Cursor *string

	/* Direction.

	   Direction to sort (asc/desc)
	*/
	Direction *string

	/* MaxQuantity.

	   Max quantity for the withdrawn asset
	*/
	MaxQuantity *string

	/* MaxTimestamp.

	   Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	MaxTimestamp *string

	/* Metadata.

	   JSON-encoded metadata filters for the withdrawn asset
	*/
	Metadata *string

	/* MinQuantity.

	   Min quantity for the withdrawn asset
	*/
	MinQuantity *string

	/* MinTimestamp.

	   Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: '2022-05-27T00:10:22Z'
	*/
	MinTimestamp *string

	/* OrderBy.

	   Property to sort by
	*/
	OrderBy *string

	/* PageSize.

	   Page size of the result
	*/
	PageSize *int64

	/* RollupStatus.

	   Status of the on-chain batch confirmation for this withdrawal
	*/
	RollupStatus *string

	/* Status.

	   Status of this withdrawal
	*/
	Status *string

	/* TokenAddress.

	   Token address of the withdrawn asset
	*/
	TokenAddress *string

	/* TokenID.

	   ERC721 Token ID of the minted asset
	*/
	TokenID *string

	/* TokenName.

	   Token name of the withdrawn asset
	*/
	TokenName *string

	/* TokenType.

	   Token type of the withdrawn asset
	*/
	TokenType *string

	/* User.

	   Ethereum address of the user who submitted this withdrawal
	*/
	User *string

	/* WithdrawnToWallet.

	   Withdrawal has been transferred to user's Layer 1 wallet
	*/
	WithdrawnToWallet *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list withdrawals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListWithdrawalsParams) WithDefaults() *ListWithdrawalsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list withdrawals params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListWithdrawalsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list withdrawals params
func (o *ListWithdrawalsParams) WithTimeout(timeout time.Duration) *ListWithdrawalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list withdrawals params
func (o *ListWithdrawalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list withdrawals params
func (o *ListWithdrawalsParams) WithContext(ctx context.Context) *ListWithdrawalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list withdrawals params
func (o *ListWithdrawalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list withdrawals params
func (o *ListWithdrawalsParams) WithHTTPClient(client *http.Client) *ListWithdrawalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list withdrawals params
func (o *ListWithdrawalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetID adds the assetID to the list withdrawals params
func (o *ListWithdrawalsParams) WithAssetID(assetID *string) *ListWithdrawalsParams {
	o.SetAssetID(assetID)
	return o
}

// SetAssetID adds the assetId to the list withdrawals params
func (o *ListWithdrawalsParams) SetAssetID(assetID *string) {
	o.AssetID = assetID
}

// WithCursor adds the cursor to the list withdrawals params
func (o *ListWithdrawalsParams) WithCursor(cursor *string) *ListWithdrawalsParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the list withdrawals params
func (o *ListWithdrawalsParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithDirection adds the direction to the list withdrawals params
func (o *ListWithdrawalsParams) WithDirection(direction *string) *ListWithdrawalsParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the list withdrawals params
func (o *ListWithdrawalsParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithMaxQuantity adds the maxQuantity to the list withdrawals params
func (o *ListWithdrawalsParams) WithMaxQuantity(maxQuantity *string) *ListWithdrawalsParams {
	o.SetMaxQuantity(maxQuantity)
	return o
}

// SetMaxQuantity adds the maxQuantity to the list withdrawals params
func (o *ListWithdrawalsParams) SetMaxQuantity(maxQuantity *string) {
	o.MaxQuantity = maxQuantity
}

// WithMaxTimestamp adds the maxTimestamp to the list withdrawals params
func (o *ListWithdrawalsParams) WithMaxTimestamp(maxTimestamp *string) *ListWithdrawalsParams {
	o.SetMaxTimestamp(maxTimestamp)
	return o
}

// SetMaxTimestamp adds the maxTimestamp to the list withdrawals params
func (o *ListWithdrawalsParams) SetMaxTimestamp(maxTimestamp *string) {
	o.MaxTimestamp = maxTimestamp
}

// WithMetadata adds the metadata to the list withdrawals params
func (o *ListWithdrawalsParams) WithMetadata(metadata *string) *ListWithdrawalsParams {
	o.SetMetadata(metadata)
	return o
}

// SetMetadata adds the metadata to the list withdrawals params
func (o *ListWithdrawalsParams) SetMetadata(metadata *string) {
	o.Metadata = metadata
}

// WithMinQuantity adds the minQuantity to the list withdrawals params
func (o *ListWithdrawalsParams) WithMinQuantity(minQuantity *string) *ListWithdrawalsParams {
	o.SetMinQuantity(minQuantity)
	return o
}

// SetMinQuantity adds the minQuantity to the list withdrawals params
func (o *ListWithdrawalsParams) SetMinQuantity(minQuantity *string) {
	o.MinQuantity = minQuantity
}

// WithMinTimestamp adds the minTimestamp to the list withdrawals params
func (o *ListWithdrawalsParams) WithMinTimestamp(minTimestamp *string) *ListWithdrawalsParams {
	o.SetMinTimestamp(minTimestamp)
	return o
}

// SetMinTimestamp adds the minTimestamp to the list withdrawals params
func (o *ListWithdrawalsParams) SetMinTimestamp(minTimestamp *string) {
	o.MinTimestamp = minTimestamp
}

// WithOrderBy adds the orderBy to the list withdrawals params
func (o *ListWithdrawalsParams) WithOrderBy(orderBy *string) *ListWithdrawalsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list withdrawals params
func (o *ListWithdrawalsParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageSize adds the pageSize to the list withdrawals params
func (o *ListWithdrawalsParams) WithPageSize(pageSize *int64) *ListWithdrawalsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list withdrawals params
func (o *ListWithdrawalsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithRollupStatus adds the rollupStatus to the list withdrawals params
func (o *ListWithdrawalsParams) WithRollupStatus(rollupStatus *string) *ListWithdrawalsParams {
	o.SetRollupStatus(rollupStatus)
	return o
}

// SetRollupStatus adds the rollupStatus to the list withdrawals params
func (o *ListWithdrawalsParams) SetRollupStatus(rollupStatus *string) {
	o.RollupStatus = rollupStatus
}

// WithStatus adds the status to the list withdrawals params
func (o *ListWithdrawalsParams) WithStatus(status *string) *ListWithdrawalsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list withdrawals params
func (o *ListWithdrawalsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTokenAddress adds the tokenAddress to the list withdrawals params
func (o *ListWithdrawalsParams) WithTokenAddress(tokenAddress *string) *ListWithdrawalsParams {
	o.SetTokenAddress(tokenAddress)
	return o
}

// SetTokenAddress adds the tokenAddress to the list withdrawals params
func (o *ListWithdrawalsParams) SetTokenAddress(tokenAddress *string) {
	o.TokenAddress = tokenAddress
}

// WithTokenID adds the tokenID to the list withdrawals params
func (o *ListWithdrawalsParams) WithTokenID(tokenID *string) *ListWithdrawalsParams {
	o.SetTokenID(tokenID)
	return o
}

// SetTokenID adds the tokenId to the list withdrawals params
func (o *ListWithdrawalsParams) SetTokenID(tokenID *string) {
	o.TokenID = tokenID
}

// WithTokenName adds the tokenName to the list withdrawals params
func (o *ListWithdrawalsParams) WithTokenName(tokenName *string) *ListWithdrawalsParams {
	o.SetTokenName(tokenName)
	return o
}

// SetTokenName adds the tokenName to the list withdrawals params
func (o *ListWithdrawalsParams) SetTokenName(tokenName *string) {
	o.TokenName = tokenName
}

// WithTokenType adds the tokenType to the list withdrawals params
func (o *ListWithdrawalsParams) WithTokenType(tokenType *string) *ListWithdrawalsParams {
	o.SetTokenType(tokenType)
	return o
}

// SetTokenType adds the tokenType to the list withdrawals params
func (o *ListWithdrawalsParams) SetTokenType(tokenType *string) {
	o.TokenType = tokenType
}

// WithUser adds the user to the list withdrawals params
func (o *ListWithdrawalsParams) WithUser(user *string) *ListWithdrawalsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the list withdrawals params
func (o *ListWithdrawalsParams) SetUser(user *string) {
	o.User = user
}

// WithWithdrawnToWallet adds the withdrawnToWallet to the list withdrawals params
func (o *ListWithdrawalsParams) WithWithdrawnToWallet(withdrawnToWallet *bool) *ListWithdrawalsParams {
	o.SetWithdrawnToWallet(withdrawnToWallet)
	return o
}

// SetWithdrawnToWallet adds the withdrawnToWallet to the list withdrawals params
func (o *ListWithdrawalsParams) SetWithdrawnToWallet(withdrawnToWallet *bool) {
	o.WithdrawnToWallet = withdrawnToWallet
}

// WriteToRequest writes these params to a swagger request
func (o *ListWithdrawalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetID != nil {

		// query param asset_id
		var qrAssetID string

		if o.AssetID != nil {
			qrAssetID = *o.AssetID
		}
		qAssetID := qrAssetID
		if qAssetID != "" {

			if err := r.SetQueryParam("asset_id", qAssetID); err != nil {
				return err
			}
		}
	}

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string

		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {

			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}
	}

	if o.MaxQuantity != nil {

		// query param max_quantity
		var qrMaxQuantity string

		if o.MaxQuantity != nil {
			qrMaxQuantity = *o.MaxQuantity
		}
		qMaxQuantity := qrMaxQuantity
		if qMaxQuantity != "" {

			if err := r.SetQueryParam("max_quantity", qMaxQuantity); err != nil {
				return err
			}
		}
	}

	if o.MaxTimestamp != nil {

		// query param max_timestamp
		var qrMaxTimestamp string

		if o.MaxTimestamp != nil {
			qrMaxTimestamp = *o.MaxTimestamp
		}
		qMaxTimestamp := qrMaxTimestamp
		if qMaxTimestamp != "" {

			if err := r.SetQueryParam("max_timestamp", qMaxTimestamp); err != nil {
				return err
			}
		}
	}

	if o.Metadata != nil {

		// query param metadata
		var qrMetadata string

		if o.Metadata != nil {
			qrMetadata = *o.Metadata
		}
		qMetadata := qrMetadata
		if qMetadata != "" {

			if err := r.SetQueryParam("metadata", qMetadata); err != nil {
				return err
			}
		}
	}

	if o.MinQuantity != nil {

		// query param min_quantity
		var qrMinQuantity string

		if o.MinQuantity != nil {
			qrMinQuantity = *o.MinQuantity
		}
		qMinQuantity := qrMinQuantity
		if qMinQuantity != "" {

			if err := r.SetQueryParam("min_quantity", qMinQuantity); err != nil {
				return err
			}
		}
	}

	if o.MinTimestamp != nil {

		// query param min_timestamp
		var qrMinTimestamp string

		if o.MinTimestamp != nil {
			qrMinTimestamp = *o.MinTimestamp
		}
		qMinTimestamp := qrMinTimestamp
		if qMinTimestamp != "" {

			if err := r.SetQueryParam("min_timestamp", qMinTimestamp); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.RollupStatus != nil {

		// query param rollup_status
		var qrRollupStatus string

		if o.RollupStatus != nil {
			qrRollupStatus = *o.RollupStatus
		}
		qRollupStatus := qrRollupStatus
		if qRollupStatus != "" {

			if err := r.SetQueryParam("rollup_status", qRollupStatus); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.TokenAddress != nil {

		// query param token_address
		var qrTokenAddress string

		if o.TokenAddress != nil {
			qrTokenAddress = *o.TokenAddress
		}
		qTokenAddress := qrTokenAddress
		if qTokenAddress != "" {

			if err := r.SetQueryParam("token_address", qTokenAddress); err != nil {
				return err
			}
		}
	}

	if o.TokenID != nil {

		// query param token_id
		var qrTokenID string

		if o.TokenID != nil {
			qrTokenID = *o.TokenID
		}
		qTokenID := qrTokenID
		if qTokenID != "" {

			if err := r.SetQueryParam("token_id", qTokenID); err != nil {
				return err
			}
		}
	}

	if o.TokenName != nil {

		// query param token_name
		var qrTokenName string

		if o.TokenName != nil {
			qrTokenName = *o.TokenName
		}
		qTokenName := qrTokenName
		if qTokenName != "" {

			if err := r.SetQueryParam("token_name", qTokenName); err != nil {
				return err
			}
		}
	}

	if o.TokenType != nil {

		// query param token_type
		var qrTokenType string

		if o.TokenType != nil {
			qrTokenType = *o.TokenType
		}
		qTokenType := qrTokenType
		if qTokenType != "" {

			if err := r.SetQueryParam("token_type", qTokenType); err != nil {
				return err
			}
		}
	}

	if o.User != nil {

		// query param user
		var qrUser string

		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {

			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}
	}

	if o.WithdrawnToWallet != nil {

		// query param withdrawn_to_wallet
		var qrWithdrawnToWallet bool

		if o.WithdrawnToWallet != nil {
			qrWithdrawnToWallet = *o.WithdrawnToWallet
		}
		qWithdrawnToWallet := swag.FormatBool(qrWithdrawnToWallet)
		if qWithdrawnToWallet != "" {

			if err := r.SetQueryParam("withdrawn_to_wallet", qWithdrawnToWallet); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
