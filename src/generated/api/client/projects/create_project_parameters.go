// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"immutable.com/imx-core-sdk-golang/api/models"
)

// NewCreateProjectParams creates a new CreateProjectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateProjectParams() *CreateProjectParams {
	return &CreateProjectParams{
		timeout:                cr.DefaultTimeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewCreateProjectParamsWithTimeout creates a new CreateProjectParams object
// with the ability to set a timeout on a request.
func NewCreateProjectParamsWithTimeout(timeout time.Duration) *CreateProjectParams {
	return &CreateProjectParams{
		timeout:                timeout,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewCreateProjectParamsWithContext creates a new CreateProjectParams object
// with the ability to set a context for a request.
func NewCreateProjectParamsWithContext(ctx context.Context) *CreateProjectParams {
	return &CreateProjectParams{
		Context:                ctx,
		AdditionalHeaderParams: make(map[string]string),
	}
}

// NewCreateProjectParamsWithHTTPClient creates a new CreateProjectParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateProjectParamsWithHTTPClient(client *http.Client) *CreateProjectParams {
	return &CreateProjectParams{
		HTTPClient:             client,
		AdditionalHeaderParams: make(map[string]string),
	}
}

/* CreateProjectParams contains all the parameters to send to the API endpoint
   for the create project operation.

   Typically these are written to a http.Request.
*/
type CreateProjectParams struct {

	/* CreateProjectRequest.

	   create a project
	*/
	CreateProjectRequest *models.CreateProjectRequest

	/* IMXSignature.

	   String created by signing wallet address and timestamp
	*/
	IMXSignature string

	/* IMXTimestamp.

	   Unix Epoc timestamp
	*/
	IMXTimestamp string

	AdditionalHeaderParams map[string]string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectParams) WithDefaults() *CreateProjectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create project params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateProjectParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create project params
func (o *CreateProjectParams) WithTimeout(timeout time.Duration) *CreateProjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create project params
func (o *CreateProjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create project params
func (o *CreateProjectParams) WithContext(ctx context.Context) *CreateProjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create project params
func (o *CreateProjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// AddCustomHeader provides option to add custom header parameters to create project params.
func (o *CreateProjectParams) AddCustomHeader(key string, value string) {
	o.AdditionalHeaderParams[key] = value
}

// WithHTTPClient adds the HTTPClient to the create project params
func (o *CreateProjectParams) WithHTTPClient(client *http.Client) *CreateProjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create project params
func (o *CreateProjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateProjectRequest adds the createProjectRequest to the create project params
func (o *CreateProjectParams) WithCreateProjectRequest(createProjectRequest *models.CreateProjectRequest) *CreateProjectParams {
	o.SetCreateProjectRequest(createProjectRequest)
	return o
}

// SetCreateProjectRequest adds the createProjectRequest to the create project params
func (o *CreateProjectParams) SetCreateProjectRequest(createProjectRequest *models.CreateProjectRequest) {
	o.CreateProjectRequest = createProjectRequest
}

// WithIMXSignature adds the iMXSignature to the create project params
func (o *CreateProjectParams) WithIMXSignature(iMXSignature string) *CreateProjectParams {
	o.SetIMXSignature(iMXSignature)
	return o
}

// SetIMXSignature adds the iMXSignature to the create project params
func (o *CreateProjectParams) SetIMXSignature(iMXSignature string) {
	o.IMXSignature = iMXSignature
}

// WithIMXTimestamp adds the iMXTimestamp to the create project params
func (o *CreateProjectParams) WithIMXTimestamp(iMXTimestamp string) *CreateProjectParams {
	o.SetIMXTimestamp(iMXTimestamp)
	return o
}

// SetIMXTimestamp adds the iMXTimestamp to the create project params
func (o *CreateProjectParams) SetIMXTimestamp(iMXTimestamp string) {
	o.IMXTimestamp = iMXTimestamp
}

// WriteToRequest writes these params to a swagger request
func (o *CreateProjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}

	for key, val := range o.AdditionalHeaderParams {
		if err := r.SetHeaderParam(key, val); err != nil {
			return err
		}
	}

	// Add SDK version header.
	if err := r.SetHeaderParam("x-sdk-version", "imx-core-sdk-golang-0.1.0"); err != nil {
		return err
	}

	var res []error
	if o.CreateProjectRequest != nil {
		if err := r.SetBodyParam(o.CreateProjectRequest); err != nil {
			return err
		}
	}

	// header param IMX-Signature
	if err := r.SetHeaderParam("IMX-Signature", o.IMXSignature); err != nil {
		return err
	}

	// header param IMX-Timestamp
	if err := r.SetHeaderParam("IMX-Timestamp", o.IMXTimestamp); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
