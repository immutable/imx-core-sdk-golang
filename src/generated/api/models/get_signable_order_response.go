// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSignableOrderResponse get signable order response
//
// swagger:model GetSignableOrderResponse
type GetSignableOrderResponse struct {

	// Fee-exclusive amount to buy
	// Required: true
	AmountBuy *string `json:"amount_buy"`

	// Amount to sell
	// Required: true
	AmountSell *string `json:"amount_sell"`

	// ID of the asset to buy
	// Required: true
	AssetIDBuy *string `json:"asset_id_buy"`

	// ID of the asset to sell
	// Required: true
	AssetIDSell *string `json:"asset_id_sell"`

	// Expiration timestamp for this order
	// Required: true
	ExpirationTimestamp *int64 `json:"expiration_timestamp"`

	// Fee information
	FeeInfo *FeeInfo `json:"fee_info,omitempty"`

	// Nonce of the order
	// Required: true
	Nonce *int64 `json:"nonce"`

	// Hash of the payload to be signed for signable order
	// Required: true
	PayloadHash *string `json:"payload_hash"`

	// Message to sign with L1 wallet to confirm order request
	// Required: true
	SignableMessage *string `json:"signable_message"`

	// Public stark key of the created user
	// Required: true
	StarkKey *string `json:"stark_key"`

	// ID of the vault into which the bought asset will be placed
	// Required: true
	VaultIDBuy *int64 `json:"vault_id_buy"`

	// ID of the vault to sell from
	// Required: true
	VaultIDSell *int64 `json:"vault_id_sell"`
}

// Validate validates this get signable order response
func (m *GetSignableOrderResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetIDBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetIDSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayloadHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignableMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarkKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultIDBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultIDSell(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSignableOrderResponse) validateAmountBuy(formats strfmt.Registry) error {

	if err := validate.Required("amount_buy", "body", m.AmountBuy); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateAmountSell(formats strfmt.Registry) error {

	if err := validate.Required("amount_sell", "body", m.AmountSell); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateAssetIDBuy(formats strfmt.Registry) error {

	if err := validate.Required("asset_id_buy", "body", m.AssetIDBuy); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateAssetIDSell(formats strfmt.Registry) error {

	if err := validate.Required("asset_id_sell", "body", m.AssetIDSell); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateExpirationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("expiration_timestamp", "body", m.ExpirationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateFeeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeInfo) { // not required
		return nil
	}

	if m.FeeInfo != nil {
		if err := m.FeeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fee_info")
			}
			return err
		}
	}

	return nil
}

func (m *GetSignableOrderResponse) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validatePayloadHash(formats strfmt.Registry) error {

	if err := validate.Required("payload_hash", "body", m.PayloadHash); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateSignableMessage(formats strfmt.Registry) error {

	if err := validate.Required("signable_message", "body", m.SignableMessage); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateStarkKey(formats strfmt.Registry) error {

	if err := validate.Required("stark_key", "body", m.StarkKey); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateVaultIDBuy(formats strfmt.Registry) error {

	if err := validate.Required("vault_id_buy", "body", m.VaultIDBuy); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderResponse) validateVaultIDSell(formats strfmt.Registry) error {

	if err := validate.Required("vault_id_sell", "body", m.VaultIDSell); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get signable order response based on the context it is used
func (m *GetSignableOrderResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSignableOrderResponse) contextValidateFeeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeInfo != nil {
		if err := m.FeeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fee_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSignableOrderResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSignableOrderResponse) UnmarshalBinary(b []byte) error {
	var res GetSignableOrderResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
