// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeeToken fee token
//
// swagger:model FeeToken
type FeeToken struct {

	// Fee token data details
	Data *FeeData `json:"data,omitempty"`

	// Fee token type. One of ETH/ERC20
	// Enum: [ETH ERC20]
	Type string `json:"type,omitempty"`
}

// Validate validates this fee token
func (m *FeeToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeeToken) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

var feeTokenTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ETH","ERC20"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		feeTokenTypeTypePropEnum = append(feeTokenTypeTypePropEnum, v)
	}
}

const (

	// FeeTokenTypeETH captures enum value "ETH"
	FeeTokenTypeETH string = "ETH"

	// FeeTokenTypeERC20 captures enum value "ERC20"
	FeeTokenTypeERC20 string = "ERC20"
)

// prop value enum
func (m *FeeToken) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, feeTokenTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FeeToken) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fee token based on the context it is used
func (m *FeeToken) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeeToken) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeeToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeeToken) UnmarshalBinary(b []byte) error {
	var res FeeToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
