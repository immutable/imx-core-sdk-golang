// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignableTransferResponseDetails signable transfer response details
//
// swagger:model SignableTransferResponseDetails
type SignableTransferResponseDetails struct {

	// Amount of the asset being transferred
	// Required: true
	Amount *string `json:"amount"`

	// ID of the asset being transferred
	// Required: true
	AssetID *string `json:"asset_id"`

	// Timestamp when this transfer will expire
	// Required: true
	ExpirationTimestamp *int64 `json:"expiration_timestamp"`

	// Nonce of the transfer
	// Required: true
	Nonce *int64 `json:"nonce"`

	// Hash of the payload to be signed for transfer
	// Required: true
	PayloadHash *string `json:"payload_hash"`

	// Receiver of the transfer
	// Required: true
	ReceiverStarkKey *string `json:"receiver_stark_key"`

	// ID of the vault being transferred to
	// Required: true
	ReceiverVaultID *int64 `json:"receiver_vault_id"`

	// ID of the vault being transferred from
	// Required: true
	SenderVaultID *int64 `json:"sender_vault_id"`

	// Token in request to match in SDK implementation
	// Required: true
	Token *SignableToken `json:"token"`
}

// Validate validates this signable transfer response details
func (m *SignableTransferResponseDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayloadHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverStarkKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverVaultID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderVaultID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignableTransferResponseDetails) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("asset_id", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateExpirationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("expiration_timestamp", "body", m.ExpirationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validatePayloadHash(formats strfmt.Registry) error {

	if err := validate.Required("payload_hash", "body", m.PayloadHash); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateReceiverStarkKey(formats strfmt.Registry) error {

	if err := validate.Required("receiver_stark_key", "body", m.ReceiverStarkKey); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateReceiverVaultID(formats strfmt.Registry) error {

	if err := validate.Required("receiver_vault_id", "body", m.ReceiverVaultID); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateSenderVaultID(formats strfmt.Registry) error {

	if err := validate.Required("sender_vault_id", "body", m.SenderVaultID); err != nil {
		return err
	}

	return nil
}

func (m *SignableTransferResponseDetails) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if m.Token != nil {
		if err := m.Token.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this signable transfer response details based on the context it is used
func (m *SignableTransferResponseDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignableTransferResponseDetails) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {

	if m.Token != nil {
		if err := m.Token.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignableTransferResponseDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignableTransferResponseDetails) UnmarshalBinary(b []byte) error {
	var res SignableTransferResponseDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
