// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Withdrawal withdrawal
//
// swagger:model Withdrawal
type Withdrawal struct {

	// Status of the on-chain batch confirmation for this withdrawal
	// Required: true
	RollupStatus *string `json:"rollup_status"`

	// Ethereum address of the user who requested this withdrawal
	// Required: true
	Sender *string `json:"sender"`

	// Status of this withdrawal
	// Required: true
	Status *string `json:"status"`

	// Time when this withdrawal was initiated
	// Required: true
	Timestamp *string `json:"timestamp"`

	// Details of the asset this user is withdrawing
	// Required: true
	Token *Token `json:"token"`

	// Sequential ID of this transaction
	// Required: true
	TransactionID *int64 `json:"transaction_id"`

	// Withdrawal has been transferred to user's Layer 1 wallet
	// Required: true
	WithdrawnToWallet *bool `json:"withdrawn_to_wallet"`
}

// Validate validates this withdrawal
func (m *Withdrawal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRollupStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWithdrawnToWallet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Withdrawal) validateRollupStatus(formats strfmt.Registry) error {

	if err := validate.Required("rollup_status", "body", m.RollupStatus); err != nil {
		return err
	}

	return nil
}

func (m *Withdrawal) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	return nil
}

func (m *Withdrawal) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Withdrawal) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *Withdrawal) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("token", "body", m.Token); err != nil {
		return err
	}

	if m.Token != nil {
		if err := m.Token.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

func (m *Withdrawal) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transaction_id", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

func (m *Withdrawal) validateWithdrawnToWallet(formats strfmt.Registry) error {

	if err := validate.Required("withdrawn_to_wallet", "body", m.WithdrawnToWallet); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this withdrawal based on the context it is used
func (m *Withdrawal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Withdrawal) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {

	if m.Token != nil {
		if err := m.Token.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Withdrawal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Withdrawal) UnmarshalBinary(b []byte) error {
	var res Withdrawal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
