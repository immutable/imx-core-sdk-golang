// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetadataSchemaRequest metadata schema request
//
// swagger:model MetadataSchemaRequest
type MetadataSchemaRequest struct {

	// Sets the metadata as filterable
	Filterable bool `json:"filterable,omitempty"`

	// Name of the metadata key
	// Required: true
	Name *string `json:"name"`

	// Type of the metadata. Values: "enum", "text", "boolean", "continuous", "discrete" | Default: "text". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping
	// Enum: [enum text boolean continuous discrete]
	Type string `json:"type,omitempty"`
}

// Validate validates this metadata schema request
func (m *MetadataSchemaRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataSchemaRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var metadataSchemaRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enum","text","boolean","continuous","discrete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metadataSchemaRequestTypeTypePropEnum = append(metadataSchemaRequestTypeTypePropEnum, v)
	}
}

const (

	// MetadataSchemaRequestTypeEnum captures enum value "enum"
	MetadataSchemaRequestTypeEnum string = "enum"

	// MetadataSchemaRequestTypeText captures enum value "text"
	MetadataSchemaRequestTypeText string = "text"

	// MetadataSchemaRequestTypeBoolean captures enum value "boolean"
	MetadataSchemaRequestTypeBoolean string = "boolean"

	// MetadataSchemaRequestTypeContinuous captures enum value "continuous"
	MetadataSchemaRequestTypeContinuous string = "continuous"

	// MetadataSchemaRequestTypeDiscrete captures enum value "discrete"
	MetadataSchemaRequestTypeDiscrete string = "discrete"
)

// prop value enum
func (m *MetadataSchemaRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metadataSchemaRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetadataSchemaRequest) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this metadata schema request based on context it is used
func (m *MetadataSchemaRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetadataSchemaRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataSchemaRequest) UnmarshalBinary(b []byte) error {
	var res MetadataSchemaRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
