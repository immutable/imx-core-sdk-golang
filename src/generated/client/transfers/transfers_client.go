// Code generated by go-swagger; DO NOT EDIT.

package transfers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transfers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transfers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTransfer(params *CreateTransferParams, opts ...ClientOption) (*CreateTransferOK, error)

	CreateTransferV1(params *CreateTransferV1Params, opts ...ClientOption) (*CreateTransferV1OK, error)

	GetSignableTransfer(params *GetSignableTransferParams, opts ...ClientOption) (*GetSignableTransferOK, error)

	GetSignableTransferV1(params *GetSignableTransferV1Params, opts ...ClientOption) (*GetSignableTransferV1OK, error)

	GetTransfer(params *GetTransferParams, opts ...ClientOption) (*GetTransferOK, error)

	ListTransfers(params *ListTransfersParams, opts ...ClientOption) (*ListTransfersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTransfer creates a transfer of multiple tokens between two parties

  Create a new transfer request
*/
func (a *Client) CreateTransfer(params *CreateTransferParams, opts ...ClientOption) (*CreateTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTransfer",
		Method:             "POST",
		PathPattern:        "/v2/transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateTransferV1 creates a transfer of tokens between two parties

  Create a new transfer request
*/
func (a *Client) CreateTransferV1(params *CreateTransferV1Params, opts ...ClientOption) (*CreateTransferV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTransferV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTransferV1",
		Method:             "POST",
		PathPattern:        "/v1/transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTransferV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTransferV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTransferV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSignableTransfer gets bulk details of a signable transfer

  Gets bulk details of a signable transfer
*/
func (a *Client) GetSignableTransfer(params *GetSignableTransferParams, opts ...ClientOption) (*GetSignableTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignableTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSignableTransfer",
		Method:             "POST",
		PathPattern:        "/v2/signable-transfer-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignableTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignableTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSignableTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSignableTransferV1 gets details of a signable transfer

  Gets details of a signable transfer
*/
func (a *Client) GetSignableTransferV1(params *GetSignableTransferV1Params, opts ...ClientOption) (*GetSignableTransferV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSignableTransferV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSignableTransferV1",
		Method:             "POST",
		PathPattern:        "/v1/signable-transfer-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSignableTransferV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSignableTransferV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSignableTransferV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTransfer gets details of a transfer with the given ID

  Get details of a transfer with the given ID
*/
func (a *Client) GetTransfer(params *GetTransferParams, opts ...ClientOption) (*GetTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransferParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTransfer",
		Method:             "GET",
		PathPattern:        "/v1/transfers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransfer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTransfers gets a list of transfers

  Get a list of transfers
*/
func (a *Client) ListTransfers(params *ListTransfersParams, opts ...ClientOption) (*ListTransfersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTransfersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTransfers",
		Method:             "GET",
		PathPattern:        "/v1/transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTransfersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTransfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
