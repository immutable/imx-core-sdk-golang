// Code generated by go-swagger; DO NOT EDIT.

package mints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mints API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mints API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetMint(params *GetMintParams, opts ...ClientOption) (*GetMintOK, error)

	GetMintableTokenDetailsByClientTokenID(params *GetMintableTokenDetailsByClientTokenIDParams, opts ...ClientOption) (*GetMintableTokenDetailsByClientTokenIDOK, error)

	ListMints(params *ListMintsParams, opts ...ClientOption) (*ListMintsOK, error)

	MintTokens(params *MintTokensParams, opts ...ClientOption) (*MintTokensOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetMint gets details of a mint with the given ID

  Get details of a mint with the given ID
*/
func (a *Client) GetMint(params *GetMintParams, opts ...ClientOption) (*GetMintOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMintParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMint",
		Method:             "GET",
		PathPattern:        "/v1/mints/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMintReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMintOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMintableTokenDetailsByClientTokenID gets details of a mintable token with the given token address and token ID

  Get details of a mintable token with the given token address and token ID
*/
func (a *Client) GetMintableTokenDetailsByClientTokenID(params *GetMintableTokenDetailsByClientTokenIDParams, opts ...ClientOption) (*GetMintableTokenDetailsByClientTokenIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMintableTokenDetailsByClientTokenIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMintableTokenDetailsByClientTokenId",
		Method:             "GET",
		PathPattern:        "/v1/mintable-token/{token_address}/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMintableTokenDetailsByClientTokenIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMintableTokenDetailsByClientTokenIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMintableTokenDetailsByClientTokenId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMints gets a list of mints

  Get a list of mints
*/
func (a *Client) ListMints(params *ListMintsParams, opts ...ClientOption) (*ListMintsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMintsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMints",
		Method:             "GET",
		PathPattern:        "/v1/mints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMintsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMintsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MintTokens mints tokens v2

  Mint tokens in a batch with fees
*/
func (a *Client) MintTokens(params *MintTokensParams, opts ...ClientOption) (*MintTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMintTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "mintTokens",
		Method:             "POST",
		PathPattern:        "/v2/mints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MintTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MintTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for mintTokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
