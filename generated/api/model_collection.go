/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1
Contact: support@github.com/immutable/
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Collection struct for Collection
type Collection struct {
	// Ethereum address of the ERC721 contract
	Address string `json:"address"`
	// URL of the tile image for this collection
	CollectionImageUrl NullableString `json:"collection_image_url"`
	// Description of the collection
	Description NullableString `json:"description"`
	// URL of the icon for this collection
	IconUrl NullableString `json:"icon_url"`
	// URL of the metadata for this collection
	MetadataApiUrl NullableString `json:"metadata_api_url"`
	// Name of the collection
	Name string `json:"name"`
	// The collection's project ID
	ProjectId int32 `json:"project_id"`
	// Project owner address
	ProjectOwnerAddress string `json:"project_owner_address"`
}

// NewCollection instantiates a new Collection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollection(address string, collectionImageUrl NullableString, description NullableString, iconUrl NullableString, metadataApiUrl NullableString, name string, projectId int32, projectOwnerAddress string) *Collection {
	this := Collection{}
	this.Address = address
	this.CollectionImageUrl = collectionImageUrl
	this.Description = description
	this.IconUrl = iconUrl
	this.MetadataApiUrl = metadataApiUrl
	this.Name = name
	this.ProjectId = projectId
	this.ProjectOwnerAddress = projectOwnerAddress
	return &this
}

// NewCollectionWithDefaults instantiates a new Collection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionWithDefaults() *Collection {
	this := Collection{}
	return &this
}

// GetAddress returns the Address field value
func (o *Collection) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Collection) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Collection) SetAddress(v string) {
	o.Address = v
}

// GetCollectionImageUrl returns the CollectionImageUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Collection) GetCollectionImageUrl() string {
	if o == nil || o.CollectionImageUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.CollectionImageUrl.Get()
}

// GetCollectionImageUrlOk returns a tuple with the CollectionImageUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Collection) GetCollectionImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectionImageUrl.Get(), o.CollectionImageUrl.IsSet()
}

// SetCollectionImageUrl sets field value
func (o *Collection) SetCollectionImageUrl(v string) {
	o.CollectionImageUrl.Set(&v)
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Collection) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Collection) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Collection) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetIconUrl returns the IconUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Collection) GetIconUrl() string {
	if o == nil || o.IconUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.IconUrl.Get()
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Collection) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IconUrl.Get(), o.IconUrl.IsSet()
}

// SetIconUrl sets field value
func (o *Collection) SetIconUrl(v string) {
	o.IconUrl.Set(&v)
}

// GetMetadataApiUrl returns the MetadataApiUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Collection) GetMetadataApiUrl() string {
	if o == nil || o.MetadataApiUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.MetadataApiUrl.Get()
}

// GetMetadataApiUrlOk returns a tuple with the MetadataApiUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Collection) GetMetadataApiUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataApiUrl.Get(), o.MetadataApiUrl.IsSet()
}

// SetMetadataApiUrl sets field value
func (o *Collection) SetMetadataApiUrl(v string) {
	o.MetadataApiUrl.Set(&v)
}

// GetName returns the Name field value
func (o *Collection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Collection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Collection) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *Collection) GetProjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Collection) GetProjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Collection) SetProjectId(v int32) {
	o.ProjectId = v
}

// GetProjectOwnerAddress returns the ProjectOwnerAddress field value
func (o *Collection) GetProjectOwnerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectOwnerAddress
}

// GetProjectOwnerAddressOk returns a tuple with the ProjectOwnerAddress field value
// and a boolean to check if the value has been set.
func (o *Collection) GetProjectOwnerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectOwnerAddress, true
}

// SetProjectOwnerAddress sets field value
func (o *Collection) SetProjectOwnerAddress(v string) {
	o.ProjectOwnerAddress = v
}

func (o Collection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if true {
		toSerialize["collection_image_url"] = o.CollectionImageUrl.Get()
	}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["icon_url"] = o.IconUrl.Get()
	}
	if true {
		toSerialize["metadata_api_url"] = o.MetadataApiUrl.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["project_id"] = o.ProjectId
	}
	if true {
		toSerialize["project_owner_address"] = o.ProjectOwnerAddress
	}
	return json.Marshal(toSerialize)
}

type NullableCollection struct {
	value *Collection
	isSet bool
}

func (v NullableCollection) Get() *Collection {
	return v.value
}

func (v *NullableCollection) Set(val *Collection) {
	v.value = val
	v.isSet = true
}

func (v NullableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollection(val *Collection) *NullableCollection {
	return &NullableCollection{value: val, isSet: true}
}

func (v NullableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


