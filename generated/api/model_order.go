/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1
Contact: support@github.com/immutable/
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Order struct for Order
type Order struct {
	// Amount of the asset already sold by this order
	AmountSold NullableString `json:"amount_sold"`
	Buy Token `json:"buy"`
	// Expiration timestamp of this order
	ExpirationTimestamp NullableString `json:"expiration_timestamp"`
	// Fee information for the order
	Fees []OrderFeeInfo `json:"fees,omitempty"`
	// ID of the order
	OrderId int32 `json:"order_id"`
	Sell Token `json:"sell"`
	// Status of the order
	Status string `json:"status"`
	// Timestamp this order was created
	Timestamp NullableString `json:"timestamp"`
	// Updated timestamp of this order
	UpdatedTimestamp NullableString `json:"updated_timestamp"`
	// Ethereum address of the user who submitted the order
	User string `json:"user"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(amountSold NullableString, buy Token, expirationTimestamp NullableString, orderId int32, sell Token, status string, timestamp NullableString, updatedTimestamp NullableString, user string) *Order {
	this := Order{}
	this.AmountSold = amountSold
	this.Buy = buy
	this.ExpirationTimestamp = expirationTimestamp
	this.OrderId = orderId
	this.Sell = sell
	this.Status = status
	this.Timestamp = timestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.User = user
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetAmountSold returns the AmountSold field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Order) GetAmountSold() string {
	if o == nil || o.AmountSold.Get() == nil {
		var ret string
		return ret
	}

	return *o.AmountSold.Get()
}

// GetAmountSoldOk returns a tuple with the AmountSold field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetAmountSoldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountSold.Get(), o.AmountSold.IsSet()
}

// SetAmountSold sets field value
func (o *Order) SetAmountSold(v string) {
	o.AmountSold.Set(&v)
}

// GetBuy returns the Buy field value
func (o *Order) GetBuy() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Buy
}

// GetBuyOk returns a tuple with the Buy field value
// and a boolean to check if the value has been set.
func (o *Order) GetBuyOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buy, true
}

// SetBuy sets field value
func (o *Order) SetBuy(v Token) {
	o.Buy = v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Order) GetExpirationTimestamp() string {
	if o == nil || o.ExpirationTimestamp.Get() == nil {
		var ret string
		return ret
	}

	return *o.ExpirationTimestamp.Get()
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetExpirationTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTimestamp.Get(), o.ExpirationTimestamp.IsSet()
}

// SetExpirationTimestamp sets field value
func (o *Order) SetExpirationTimestamp(v string) {
	o.ExpirationTimestamp.Set(&v)
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *Order) GetFees() []OrderFeeInfo {
	if o == nil || o.Fees == nil {
		var ret []OrderFeeInfo
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFeesOk() ([]OrderFeeInfo, bool) {
	if o == nil || o.Fees == nil {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *Order) HasFees() bool {
	if o != nil && o.Fees != nil {
		return true
	}

	return false
}

// SetFees gets a reference to the given []OrderFeeInfo and assigns it to the Fees field.
func (o *Order) SetFees(v []OrderFeeInfo) {
	o.Fees = v
}

// GetOrderId returns the OrderId field value
func (o *Order) GetOrderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *Order) GetOrderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *Order) SetOrderId(v int32) {
	o.OrderId = v
}

// GetSell returns the Sell field value
func (o *Order) GetSell() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Sell
}

// GetSellOk returns a tuple with the Sell field value
// and a boolean to check if the value has been set.
func (o *Order) GetSellOk() (*Token, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sell, true
}

// SetSell sets field value
func (o *Order) SetSell(v Token) {
	o.Sell = v
}

// GetStatus returns the Status field value
func (o *Order) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Order) SetStatus(v string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Order) GetTimestamp() string {
	if o == nil || o.Timestamp.Get() == nil {
		var ret string
		return ret
	}

	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// SetTimestamp sets field value
func (o *Order) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Order) GetUpdatedTimestamp() string {
	if o == nil || o.UpdatedTimestamp.Get() == nil {
		var ret string
		return ret
	}

	return *o.UpdatedTimestamp.Get()
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedTimestamp.Get(), o.UpdatedTimestamp.IsSet()
}

// SetUpdatedTimestamp sets field value
func (o *Order) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp.Set(&v)
}

// GetUser returns the User field value
func (o *Order) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Order) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Order) SetUser(v string) {
	o.User = v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount_sold"] = o.AmountSold.Get()
	}
	if true {
		toSerialize["buy"] = o.Buy
	}
	if true {
		toSerialize["expiration_timestamp"] = o.ExpirationTimestamp.Get()
	}
	if o.Fees != nil {
		toSerialize["fees"] = o.Fees
	}
	if true {
		toSerialize["order_id"] = o.OrderId
	}
	if true {
		toSerialize["sell"] = o.Sell
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if true {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp.Get()
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


