// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new metadata API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for metadata API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddMetadataSchemaToCollection(params *AddMetadataSchemaToCollectionParams, opts ...ClientOption) (*AddMetadataSchemaToCollectionCreated, error)

	GetMetadataSchema(params *GetMetadataSchemaParams, opts ...ClientOption) (*GetMetadataSchemaOK, error)

	UpdateMetadataSchemaByName(params *UpdateMetadataSchemaByNameParams, opts ...ClientOption) (*UpdateMetadataSchemaByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddMetadataSchemaToCollection adds metadata schema to collection

  Add metadata schema to collection
*/
func (a *Client) AddMetadataSchemaToCollection(params *AddMetadataSchemaToCollectionParams, opts ...ClientOption) (*AddMetadataSchemaToCollectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMetadataSchemaToCollectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addMetadataSchemaToCollection",
		Method:             "POST",
		PathPattern:        "/v1/collections/{address}/metadata-schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddMetadataSchemaToCollectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddMetadataSchemaToCollectionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addMetadataSchemaToCollection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMetadataSchema gets collection metadata schema

  Get collection metadata schema
*/
func (a *Client) GetMetadataSchema(params *GetMetadataSchemaParams, opts ...ClientOption) (*GetMetadataSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataSchemaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetadataSchema",
		Method:             "GET",
		PathPattern:        "/v1/collections/{address}/metadata-schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetadataSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetadataSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMetadataSchemaByName updates metadata schema by name

  Update metadata schema by name
*/
func (a *Client) UpdateMetadataSchemaByName(params *UpdateMetadataSchemaByNameParams, opts ...ClientOption) (*UpdateMetadataSchemaByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMetadataSchemaByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMetadataSchemaByName",
		Method:             "PATCH",
		PathPattern:        "/v1/collections/{address}/metadata-schema/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMetadataSchemaByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMetadataSchemaByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMetadataSchemaByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
