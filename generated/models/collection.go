// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Collection collection
//
// swagger:model Collection
type Collection struct {

	// Ethereum address of the ERC721 contract
	// Required: true
	Address *string `json:"address"`

	// URL of the tile image for this collection
	// Required: true
	CollectionImageURL *string `json:"collection_image_url"`

	// Description of the collection
	// Required: true
	Description *string `json:"description"`

	// URL of the icon for this collection
	// Required: true
	IconURL *string `json:"icon_url"`

	// URL of the metadata for this collection
	// Required: true
	MetadataAPIURL *string `json:"metadata_api_url"`

	// Name of the collection
	// Required: true
	Name *string `json:"name"`

	// The collection's project ID
	// Required: true
	ProjectID *int64 `json:"project_id"`
}

// Validate validates this collection
func (m *Collection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectionImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataAPIURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Collection) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateCollectionImageURL(formats strfmt.Registry) error {

	if err := validate.Required("collection_image_url", "body", m.CollectionImageURL); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateIconURL(formats strfmt.Registry) error {

	if err := validate.Required("icon_url", "body", m.IconURL); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateMetadataAPIURL(formats strfmt.Registry) error {

	if err := validate.Required("metadata_api_url", "body", m.MetadataAPIURL); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Collection) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this collection based on context it is used
func (m *Collection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Collection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Collection) UnmarshalBinary(b []byte) error {
	var res Collection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
