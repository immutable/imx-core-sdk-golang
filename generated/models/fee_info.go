// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeeInfo fee info
//
// swagger:model FeeInfo
type FeeInfo struct {

	// ID of the asset these fees relate to
	// Required: true
	AssetID *string `json:"asset_id"`

	// Fee limit
	// Required: true
	FeeLimit *string `json:"fee_limit"`

	// ID of vault the asset belong to
	// Required: true
	SourceVaultID *int64 `json:"source_vault_id"`
}

// Validate validates this fee info
func (m *FeeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceVaultID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeeInfo) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("asset_id", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *FeeInfo) validateFeeLimit(formats strfmt.Registry) error {

	if err := validate.Required("fee_limit", "body", m.FeeLimit); err != nil {
		return err
	}

	return nil
}

func (m *FeeInfo) validateSourceVaultID(formats strfmt.Registry) error {

	if err := validate.Required("source_vault_id", "body", m.SourceVaultID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fee info based on context it is used
func (m *FeeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FeeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeeInfo) UnmarshalBinary(b []byte) error {
	var res FeeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
