// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Order order
//
// swagger:model Order
type Order struct {

	// Amount of the asset already sold by this order
	// Required: true
	AmountSold *string `json:"amount_sold"`

	// Details of the asset being bought
	// Required: true
	Buy *Token `json:"buy"`

	// Expiration timestamp of this order
	// Required: true
	ExpirationTimestamp *string `json:"expiration_timestamp"`

	// Fee information for the order
	Fees []*OrderFeeInfo `json:"fees"`

	// ID of the order
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Details of the asset being sold
	// Required: true
	Sell *Token `json:"sell"`

	// Status of the order
	// Required: true
	Status *string `json:"status"`

	// Timestamp this order was created
	// Required: true
	Timestamp *string `json:"timestamp"`

	// Updated timestamp of this order
	// Required: true
	UpdatedTimestamp *string `json:"updated_timestamp"`

	// Ethereum address of the user who submitted the order
	// Required: true
	User *string `json:"user"`
}

// Validate validates this order
func (m *Order) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountSold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) validateAmountSold(formats strfmt.Registry) error {

	if err := validate.Required("amount_sold", "body", m.AmountSold); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateBuy(formats strfmt.Registry) error {

	if err := validate.Required("buy", "body", m.Buy); err != nil {
		return err
	}

	if m.Buy != nil {
		if err := m.Buy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buy")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateExpirationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("expiration_timestamp", "body", m.ExpirationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(m.Fees) { // not required
		return nil
	}

	for i := 0; i < len(m.Fees); i++ {
		if swag.IsZero(m.Fees[i]) { // not required
			continue
		}

		if m.Fees[i] != nil {
			if err := m.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateSell(formats strfmt.Registry) error {

	if err := validate.Required("sell", "body", m.Sell); err != nil {
		return err
	}

	if m.Sell != nil {
		if err := m.Sell.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sell")
			}
			return err
		}
	}

	return nil
}

func (m *Order) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("updated_timestamp", "body", m.UpdatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Order) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order based on the context it is used
func (m *Order) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSell(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Order) contextValidateBuy(ctx context.Context, formats strfmt.Registry) error {

	if m.Buy != nil {
		if err := m.Buy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buy")
			}
			return err
		}
	}

	return nil
}

func (m *Order) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fees); i++ {

		if m.Fees[i] != nil {
			if err := m.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Order) contextValidateSell(ctx context.Context, formats strfmt.Registry) error {

	if m.Sell != nil {
		if err := m.Sell.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sell")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Order) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Order) UnmarshalBinary(b []byte) error {
	var res Order
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
