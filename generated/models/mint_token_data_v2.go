// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MintTokenDataV2 mint token data v2
//
// swagger:model MintTokenDataV2
type MintTokenDataV2 struct {

	// Token metadata blueprint
	Blueprint string `json:"blueprint,omitempty"`

	// Token ID
	// Required: true
	ID *string `json:"id"`

	// List of mint fees
	Royalties []*MintFee `json:"royalties"`
}

// Validate validates this mint token data v2
func (m *MintTokenDataV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoyalties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MintTokenDataV2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *MintTokenDataV2) validateRoyalties(formats strfmt.Registry) error {
	if swag.IsZero(m.Royalties) { // not required
		return nil
	}

	for i := 0; i < len(m.Royalties); i++ {
		if swag.IsZero(m.Royalties[i]) { // not required
			continue
		}

		if m.Royalties[i] != nil {
			if err := m.Royalties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("royalties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("royalties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this mint token data v2 based on the context it is used
func (m *MintTokenDataV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoyalties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MintTokenDataV2) contextValidateRoyalties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Royalties); i++ {

		if m.Royalties[i] != nil {
			if err := m.Royalties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("royalties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("royalties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MintTokenDataV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MintTokenDataV2) UnmarshalBinary(b []byte) error {
	var res MintTokenDataV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
