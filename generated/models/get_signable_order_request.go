// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSignableOrderRequest get signable order request
//
// swagger:model GetSignableOrderRequest
type GetSignableOrderRequest struct {

	// Fee-exclusive amount to buy
	// Required: true
	AmountBuy *string `json:"amount_buy"`

	// Amount to sell
	// Required: true
	AmountSell *string `json:"amount_sell"`

	// ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour
	ExpirationTimestamp int64 `json:"expiration_timestamp,omitempty"`

	// Inclusion of either maker or taker fees
	Fees []*FeeEntry `json:"fees"`

	// Token to buy
	// Required: true
	TokenBuy *SignableToken `json:"token_buy"`

	// Token to sell
	// Required: true
	TokenSell *SignableToken `json:"token_sell"`

	// Ethereum address of the submitting user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this get signable order request
func (m *GetSignableOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSignableOrderRequest) validateAmountBuy(formats strfmt.Registry) error {

	if err := validate.Required("amount_buy", "body", m.AmountBuy); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderRequest) validateAmountSell(formats strfmt.Registry) error {

	if err := validate.Required("amount_sell", "body", m.AmountSell); err != nil {
		return err
	}

	return nil
}

func (m *GetSignableOrderRequest) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(m.Fees) { // not required
		return nil
	}

	for i := 0; i < len(m.Fees); i++ {
		if swag.IsZero(m.Fees[i]) { // not required
			continue
		}

		if m.Fees[i] != nil {
			if err := m.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetSignableOrderRequest) validateTokenBuy(formats strfmt.Registry) error {

	if err := validate.Required("token_buy", "body", m.TokenBuy); err != nil {
		return err
	}

	if m.TokenBuy != nil {
		if err := m.TokenBuy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_buy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_buy")
			}
			return err
		}
	}

	return nil
}

func (m *GetSignableOrderRequest) validateTokenSell(formats strfmt.Registry) error {

	if err := validate.Required("token_sell", "body", m.TokenSell); err != nil {
		return err
	}

	if m.TokenSell != nil {
		if err := m.TokenSell.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_sell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_sell")
			}
			return err
		}
	}

	return nil
}

func (m *GetSignableOrderRequest) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get signable order request based on the context it is used
func (m *GetSignableOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenBuy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenSell(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSignableOrderRequest) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fees); i++ {

		if m.Fees[i] != nil {
			if err := m.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetSignableOrderRequest) contextValidateTokenBuy(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenBuy != nil {
		if err := m.TokenBuy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_buy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_buy")
			}
			return err
		}
	}

	return nil
}

func (m *GetSignableOrderRequest) contextValidateTokenSell(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenSell != nil {
		if err := m.TokenSell.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_sell")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_sell")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSignableOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSignableOrderRequest) UnmarshalBinary(b []byte) error {
	var res GetSignableOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
