// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateTradeRequestV1 create trade request v1
//
// swagger:model CreateTradeRequestV1
type CreateTradeRequestV1 struct {

	// Amount to buy
	// Required: true
	AmountBuy *string `json:"amount_buy"`

	// Amount to sell
	// Required: true
	AmountSell *string `json:"amount_sell"`

	// ID of the asset to buy
	// Required: true
	AssetIDBuy *string `json:"asset_id_buy"`

	// ID of the asset to sell
	// Required: true
	AssetIDSell *string `json:"asset_id_sell"`

	// Expiration timestamp for this trade
	// Required: true
	ExpirationTimestamp *int64 `json:"expiration_timestamp"`

	// Fee details
	FeeInfo *FeeInfo `json:"fee_info,omitempty"`

	// Fee information
	Fees []*FeeEntry `json:"fees"`

	// Whether to include fees in trade
	IncludeFees bool `json:"include_fees,omitempty"`

	// Nonce of the trade
	// Required: true
	Nonce *int64 `json:"nonce"`

	// ID of the order
	// Required: true
	OrderID *int64 `json:"order_id"`

	// Public stark key of the user creating trade
	// Required: true
	StarkKey *string `json:"stark_key"`

	// Payload signature
	// Required: true
	StarkSignature *string `json:"stark_signature"`

	// ID of the vault into which the traded asset will be placed
	// Required: true
	VaultIDBuy *int64 `json:"vault_id_buy"`

	// ID of the vault to sell from
	// Required: true
	VaultIDSell *int64 `json:"vault_id_sell"`
}

// Validate validates this create trade request v1
func (m *CreateTradeRequestV1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetIDBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetIDSell(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarkKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarkSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultIDBuy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultIDSell(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTradeRequestV1) validateAmountBuy(formats strfmt.Registry) error {

	if err := validate.Required("amount_buy", "body", m.AmountBuy); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateAmountSell(formats strfmt.Registry) error {

	if err := validate.Required("amount_sell", "body", m.AmountSell); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateAssetIDBuy(formats strfmt.Registry) error {

	if err := validate.Required("asset_id_buy", "body", m.AssetIDBuy); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateAssetIDSell(formats strfmt.Registry) error {

	if err := validate.Required("asset_id_sell", "body", m.AssetIDSell); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateExpirationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("expiration_timestamp", "body", m.ExpirationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateFeeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeInfo) { // not required
		return nil
	}

	if m.FeeInfo != nil {
		if err := m.FeeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fee_info")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTradeRequestV1) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(m.Fees) { // not required
		return nil
	}

	for i := 0; i < len(m.Fees); i++ {
		if swag.IsZero(m.Fees[i]) { // not required
			continue
		}

		if m.Fees[i] != nil {
			if err := m.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateTradeRequestV1) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("order_id", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateStarkKey(formats strfmt.Registry) error {

	if err := validate.Required("stark_key", "body", m.StarkKey); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateStarkSignature(formats strfmt.Registry) error {

	if err := validate.Required("stark_signature", "body", m.StarkSignature); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateVaultIDBuy(formats strfmt.Registry) error {

	if err := validate.Required("vault_id_buy", "body", m.VaultIDBuy); err != nil {
		return err
	}

	return nil
}

func (m *CreateTradeRequestV1) validateVaultIDSell(formats strfmt.Registry) error {

	if err := validate.Required("vault_id_sell", "body", m.VaultIDSell); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create trade request v1 based on the context it is used
func (m *CreateTradeRequestV1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTradeRequestV1) contextValidateFeeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeInfo != nil {
		if err := m.FeeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fee_info")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTradeRequestV1) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fees); i++ {

		if m.Fees[i] != nil {
			if err := m.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTradeRequestV1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTradeRequestV1) UnmarshalBinary(b []byte) error {
	var res CreateTradeRequestV1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
