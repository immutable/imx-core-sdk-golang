// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenDetails token details
//
// swagger:model TokenDetails
type TokenDetails struct {

	// Number of decimals for token
	// Required: true
	Decimals *string `json:"decimals"`

	// Url for the icon of the token
	// Required: true
	ImageURL *string `json:"image_url"`

	// Full name of the token (e.g. Ether)
	// Required: true
	Name *string `json:"name"`

	// Quantum for token
	// Required: true
	Quantum *string `json:"quantum"`

	// Ticker symbol for token (e.g. ETH/USDC/IMX)
	// Required: true
	Symbol *string `json:"symbol"`

	// Address of the ERC721 contract
	// Required: true
	TokenAddress *string `json:"token_address"`
}

// Validate validates this token details
func (m *TokenDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecimals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenDetails) validateDecimals(formats strfmt.Registry) error {

	if err := validate.Required("decimals", "body", m.Decimals); err != nil {
		return err
	}

	return nil
}

func (m *TokenDetails) validateImageURL(formats strfmt.Registry) error {

	if err := validate.Required("image_url", "body", m.ImageURL); err != nil {
		return err
	}

	return nil
}

func (m *TokenDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TokenDetails) validateQuantum(formats strfmt.Registry) error {

	if err := validate.Required("quantum", "body", m.Quantum); err != nil {
		return err
	}

	return nil
}

func (m *TokenDetails) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("symbol", "body", m.Symbol); err != nil {
		return err
	}

	return nil
}

func (m *TokenDetails) validateTokenAddress(formats strfmt.Registry) error {

	if err := validate.Required("token_address", "body", m.TokenAddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token details based on context it is used
func (m *TokenDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenDetails) UnmarshalBinary(b []byte) error {
	var res TokenDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
