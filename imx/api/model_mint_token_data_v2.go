/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MintTokenDataV2 struct for MintTokenDataV2
type MintTokenDataV2 struct {
	// Token metadata blueprint
	Blueprint *string `json:"blueprint,omitempty"`
	// Token ID Note: While the Token ID is required to be a string, it still needs to be a valid uint256 as per the ERC-721 token standard.
	Id string `json:"id"`
	// List of mint fees
	Royalties []MintFee `json:"royalties,omitempty"`
}

// NewMintTokenDataV2 instantiates a new MintTokenDataV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMintTokenDataV2(id string) *MintTokenDataV2 {
	this := MintTokenDataV2{}
	this.Id = id
	return &this
}

// NewMintTokenDataV2WithDefaults instantiates a new MintTokenDataV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMintTokenDataV2WithDefaults() *MintTokenDataV2 {
	this := MintTokenDataV2{}
	return &this
}

// GetBlueprint returns the Blueprint field value if set, zero value otherwise.
func (o *MintTokenDataV2) GetBlueprint() string {
	if o == nil || o.Blueprint == nil {
		var ret string
		return ret
	}
	return *o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MintTokenDataV2) GetBlueprintOk() (*string, bool) {
	if o == nil || o.Blueprint == nil {
		return nil, false
	}
	return o.Blueprint, true
}

// HasBlueprint returns a boolean if a field has been set.
func (o *MintTokenDataV2) HasBlueprint() bool {
	if o != nil && o.Blueprint != nil {
		return true
	}

	return false
}

// SetBlueprint gets a reference to the given string and assigns it to the Blueprint field.
func (o *MintTokenDataV2) SetBlueprint(v string) {
	o.Blueprint = &v
}

// GetId returns the Id field value
func (o *MintTokenDataV2) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MintTokenDataV2) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MintTokenDataV2) SetId(v string) {
	o.Id = v
}

// GetRoyalties returns the Royalties field value if set, zero value otherwise.
func (o *MintTokenDataV2) GetRoyalties() []MintFee {
	if o == nil || o.Royalties == nil {
		var ret []MintFee
		return ret
	}
	return o.Royalties
}

// GetRoyaltiesOk returns a tuple with the Royalties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MintTokenDataV2) GetRoyaltiesOk() ([]MintFee, bool) {
	if o == nil || o.Royalties == nil {
		return nil, false
	}
	return o.Royalties, true
}

// HasRoyalties returns a boolean if a field has been set.
func (o *MintTokenDataV2) HasRoyalties() bool {
	if o != nil && o.Royalties != nil {
		return true
	}

	return false
}

// SetRoyalties gets a reference to the given []MintFee and assigns it to the Royalties field.
func (o *MintTokenDataV2) SetRoyalties(v []MintFee) {
	o.Royalties = v
}

func (o MintTokenDataV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Blueprint != nil {
		toSerialize["blueprint"] = o.Blueprint
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Royalties != nil {
		toSerialize["royalties"] = o.Royalties
	}
	return json.Marshal(toSerialize)
}

type NullableMintTokenDataV2 struct {
	value *MintTokenDataV2
	isSet bool
}

func (v NullableMintTokenDataV2) Get() *MintTokenDataV2 {
	return v.value
}

func (v *NullableMintTokenDataV2) Set(val *MintTokenDataV2) {
	v.value = val
	v.isSet = true
}

func (v NullableMintTokenDataV2) IsSet() bool {
	return v.isSet
}

func (v *NullableMintTokenDataV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMintTokenDataV2(val *MintTokenDataV2) *NullableMintTokenDataV2 {
	return &NullableMintTokenDataV2{value: val, isSet: true}
}

func (v NullableMintTokenDataV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMintTokenDataV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


