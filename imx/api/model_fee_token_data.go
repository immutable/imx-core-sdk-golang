/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// FeeTokenData Fee token data details
type FeeTokenData struct {
	// Address of ERC721/ERC20 contract
	ContractAddress *string `json:"contract_address,omitempty"`
	// Number of decimals supported by this asset
	Decimals *int32 `json:"decimals,omitempty"`
}

// NewFeeTokenData instantiates a new FeeTokenData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeeTokenData() *FeeTokenData {
	this := FeeTokenData{}
	return &this
}

// NewFeeTokenDataWithDefaults instantiates a new FeeTokenData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeTokenDataWithDefaults() *FeeTokenData {
	this := FeeTokenData{}
	return &this
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *FeeTokenData) GetContractAddress() string {
	if o == nil || o.ContractAddress == nil {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeTokenData) GetContractAddressOk() (*string, bool) {
	if o == nil || o.ContractAddress == nil {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *FeeTokenData) HasContractAddress() bool {
	if o != nil && o.ContractAddress != nil {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *FeeTokenData) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *FeeTokenData) GetDecimals() int32 {
	if o == nil || o.Decimals == nil {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeeTokenData) GetDecimalsOk() (*int32, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *FeeTokenData) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *FeeTokenData) SetDecimals(v int32) {
	o.Decimals = &v
}

func (o FeeTokenData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContractAddress != nil {
		toSerialize["contract_address"] = o.ContractAddress
	}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	return json.Marshal(toSerialize)
}

type NullableFeeTokenData struct {
	value *FeeTokenData
	isSet bool
}

func (v NullableFeeTokenData) Get() *FeeTokenData {
	return v.value
}

func (v *NullableFeeTokenData) Set(val *FeeTokenData) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeTokenData) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeTokenData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeTokenData(val *FeeTokenData) *NullableFeeTokenData {
	return &NullableFeeTokenData{value: val, isSet: true}
}

func (v NullableFeeTokenData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeTokenData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


