/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TokenDataOAIGen Token details of this asset
type TokenDataOAIGen struct {
	// Number of decimals supported by this asset
	Decimals *int32 `json:"decimals,omitempty"`
	// [DEPRECATED] Internal Immutable X Token ID
	Id *string `json:"id,omitempty"`
	Properties *TokenDataProperties `json:"properties,omitempty"`
	// Quantity of this asset - inclusive of fees for buy order in v1 API and exclusive of fees in v3 API
	Quantity string `json:"quantity"`
	// Quantity of this asset with the sum of all fees applied to the asset
	QuantityWithFees string `json:"quantity_with_fees"`
	// Symbol of a token
	Symbol *string `json:"symbol,omitempty"`
	// Address of ERC721/ERC20 contract
	TokenAddress *string `json:"token_address,omitempty"`
	// ERC721 Token ID
	TokenId *string `json:"token_id,omitempty"`
}

// NewTokenDataOAIGen instantiates a new TokenDataOAIGen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenDataOAIGen(quantity string, quantityWithFees string) *TokenDataOAIGen {
	this := TokenDataOAIGen{}
	this.Quantity = quantity
	this.QuantityWithFees = quantityWithFees
	return &this
}

// NewTokenDataOAIGenWithDefaults instantiates a new TokenDataOAIGen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenDataOAIGenWithDefaults() *TokenDataOAIGen {
	this := TokenDataOAIGen{}
	return &this
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *TokenDataOAIGen) GetDecimals() int32 {
	if o == nil || o.Decimals == nil {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetDecimalsOk() (*int32, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *TokenDataOAIGen) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *TokenDataOAIGen) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenDataOAIGen) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenDataOAIGen) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenDataOAIGen) SetId(v string) {
	o.Id = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *TokenDataOAIGen) GetProperties() TokenDataProperties {
	if o == nil || o.Properties == nil {
		var ret TokenDataProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetPropertiesOk() (*TokenDataProperties, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TokenDataOAIGen) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given TokenDataProperties and assigns it to the Properties field.
func (o *TokenDataOAIGen) SetProperties(v TokenDataProperties) {
	o.Properties = &v
}

// GetQuantity returns the Quantity field value
func (o *TokenDataOAIGen) GetQuantity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetQuantityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *TokenDataOAIGen) SetQuantity(v string) {
	o.Quantity = v
}

// GetQuantityWithFees returns the QuantityWithFees field value
func (o *TokenDataOAIGen) GetQuantityWithFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuantityWithFees
}

// GetQuantityWithFeesOk returns a tuple with the QuantityWithFees field value
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetQuantityWithFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuantityWithFees, true
}

// SetQuantityWithFees sets field value
func (o *TokenDataOAIGen) SetQuantityWithFees(v string) {
	o.QuantityWithFees = v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TokenDataOAIGen) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TokenDataOAIGen) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *TokenDataOAIGen) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTokenAddress returns the TokenAddress field value if set, zero value otherwise.
func (o *TokenDataOAIGen) GetTokenAddress() string {
	if o == nil || o.TokenAddress == nil {
		var ret string
		return ret
	}
	return *o.TokenAddress
}

// GetTokenAddressOk returns a tuple with the TokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetTokenAddressOk() (*string, bool) {
	if o == nil || o.TokenAddress == nil {
		return nil, false
	}
	return o.TokenAddress, true
}

// HasTokenAddress returns a boolean if a field has been set.
func (o *TokenDataOAIGen) HasTokenAddress() bool {
	if o != nil && o.TokenAddress != nil {
		return true
	}

	return false
}

// SetTokenAddress gets a reference to the given string and assigns it to the TokenAddress field.
func (o *TokenDataOAIGen) SetTokenAddress(v string) {
	o.TokenAddress = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *TokenDataOAIGen) GetTokenId() string {
	if o == nil || o.TokenId == nil {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenDataOAIGen) GetTokenIdOk() (*string, bool) {
	if o == nil || o.TokenId == nil {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *TokenDataOAIGen) HasTokenId() bool {
	if o != nil && o.TokenId != nil {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *TokenDataOAIGen) SetTokenId(v string) {
	o.TokenId = &v
}

func (o TokenDataOAIGen) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	if true {
		toSerialize["quantity_with_fees"] = o.QuantityWithFees
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TokenAddress != nil {
		toSerialize["token_address"] = o.TokenAddress
	}
	if o.TokenId != nil {
		toSerialize["token_id"] = o.TokenId
	}
	return json.Marshal(toSerialize)
}

type NullableTokenDataOAIGen struct {
	value *TokenDataOAIGen
	isSet bool
}

func (v NullableTokenDataOAIGen) Get() *TokenDataOAIGen {
	return v.value
}

func (v *NullableTokenDataOAIGen) Set(val *TokenDataOAIGen) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenDataOAIGen) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenDataOAIGen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenDataOAIGen(val *TokenDataOAIGen) *NullableTokenDataOAIGen {
	return &NullableTokenDataOAIGen{value: val, isSet: true}
}

func (v NullableTokenDataOAIGen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenDataOAIGen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


