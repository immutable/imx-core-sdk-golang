/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DepositToken Details of the asset being deposited
type DepositToken struct {
	Data TokenDataOAIGen `json:"data"`
	// Type of this asset (ETH/ERC20/ERC721)
	Type string `json:"type"`
}

// NewDepositToken instantiates a new DepositToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepositToken(data TokenDataOAIGen, type_ string) *DepositToken {
	this := DepositToken{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewDepositTokenWithDefaults instantiates a new DepositToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositTokenWithDefaults() *DepositToken {
	this := DepositToken{}
	return &this
}

// GetData returns the Data field value
func (o *DepositToken) GetData() TokenDataOAIGen {
	if o == nil {
		var ret TokenDataOAIGen
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DepositToken) GetDataOk() (*TokenDataOAIGen, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DepositToken) SetData(v TokenDataOAIGen) {
	o.Data = v
}

// GetType returns the Type field value
func (o *DepositToken) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DepositToken) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DepositToken) SetType(v string) {
	o.Type = v
}

func (o DepositToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableDepositToken struct {
	value *DepositToken
	isSet bool
}

func (v NullableDepositToken) Get() *DepositToken {
	return v.value
}

func (v *NullableDepositToken) Set(val *DepositToken) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositToken) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositToken(val *DepositToken) *NullableDepositToken {
	return &NullableDepositToken{value: val, isSet: true}
}

func (v NullableDepositToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


