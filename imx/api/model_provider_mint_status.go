/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ProviderMintStatus struct for ProviderMintStatus
type ProviderMintStatus struct {
	// reason for mint failure
	FailureReason *string `json:"failureReason,omitempty"`
	// External transaction id
	Id *string `json:"id,omitempty"`
	// Mint status
	Status *string `json:"status,omitempty"`
	// status updated-at timestamp
	StatusChangedAt *string `json:"statusChangedAt,omitempty"`
	// Asset id
	TokenId *string `json:"tokenId,omitempty"`
	// Transaction hash
	TransactionHash []string `json:"transactionHash,omitempty"`
}

// NewProviderMintStatus instantiates a new ProviderMintStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderMintStatus() *ProviderMintStatus {
	this := ProviderMintStatus{}
	return &this
}

// NewProviderMintStatusWithDefaults instantiates a new ProviderMintStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderMintStatusWithDefaults() *ProviderMintStatus {
	this := ProviderMintStatus{}
	return &this
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *ProviderMintStatus) GetFailureReason() string {
	if o == nil || o.FailureReason == nil {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderMintStatus) GetFailureReasonOk() (*string, bool) {
	if o == nil || o.FailureReason == nil {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *ProviderMintStatus) HasFailureReason() bool {
	if o != nil && o.FailureReason != nil {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *ProviderMintStatus) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProviderMintStatus) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderMintStatus) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProviderMintStatus) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProviderMintStatus) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProviderMintStatus) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderMintStatus) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProviderMintStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ProviderMintStatus) SetStatus(v string) {
	o.Status = &v
}

// GetStatusChangedAt returns the StatusChangedAt field value if set, zero value otherwise.
func (o *ProviderMintStatus) GetStatusChangedAt() string {
	if o == nil || o.StatusChangedAt == nil {
		var ret string
		return ret
	}
	return *o.StatusChangedAt
}

// GetStatusChangedAtOk returns a tuple with the StatusChangedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderMintStatus) GetStatusChangedAtOk() (*string, bool) {
	if o == nil || o.StatusChangedAt == nil {
		return nil, false
	}
	return o.StatusChangedAt, true
}

// HasStatusChangedAt returns a boolean if a field has been set.
func (o *ProviderMintStatus) HasStatusChangedAt() bool {
	if o != nil && o.StatusChangedAt != nil {
		return true
	}

	return false
}

// SetStatusChangedAt gets a reference to the given string and assigns it to the StatusChangedAt field.
func (o *ProviderMintStatus) SetStatusChangedAt(v string) {
	o.StatusChangedAt = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *ProviderMintStatus) GetTokenId() string {
	if o == nil || o.TokenId == nil {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderMintStatus) GetTokenIdOk() (*string, bool) {
	if o == nil || o.TokenId == nil {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *ProviderMintStatus) HasTokenId() bool {
	if o != nil && o.TokenId != nil {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *ProviderMintStatus) SetTokenId(v string) {
	o.TokenId = &v
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *ProviderMintStatus) GetTransactionHash() []string {
	if o == nil || o.TransactionHash == nil {
		var ret []string
		return ret
	}
	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderMintStatus) GetTransactionHashOk() ([]string, bool) {
	if o == nil || o.TransactionHash == nil {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *ProviderMintStatus) HasTransactionHash() bool {
	if o != nil && o.TransactionHash != nil {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given []string and assigns it to the TransactionHash field.
func (o *ProviderMintStatus) SetTransactionHash(v []string) {
	o.TransactionHash = v
}

func (o ProviderMintStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureReason != nil {
		toSerialize["failureReason"] = o.FailureReason
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StatusChangedAt != nil {
		toSerialize["statusChangedAt"] = o.StatusChangedAt
	}
	if o.TokenId != nil {
		toSerialize["tokenId"] = o.TokenId
	}
	if o.TransactionHash != nil {
		toSerialize["transactionHash"] = o.TransactionHash
	}
	return json.Marshal(toSerialize)
}

type NullableProviderMintStatus struct {
	value *ProviderMintStatus
	isSet bool
}

func (v NullableProviderMintStatus) Get() *ProviderMintStatus {
	return v.value
}

func (v *NullableProviderMintStatus) Set(val *ProviderMintStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderMintStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderMintStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderMintStatus(val *ProviderMintStatus) *NullableProviderMintStatus {
	return &NullableProviderMintStatus{value: val, isSet: true}
}

func (v NullableProviderMintStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderMintStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


