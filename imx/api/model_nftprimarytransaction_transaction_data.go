/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NftprimarytransactionTransactionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NftprimarytransactionTransactionData{}

// NftprimarytransactionTransactionData struct for NftprimarytransactionTransactionData
type NftprimarytransactionTransactionData struct {
	// Contract address of the asset
	ContractAddress *string `json:"contract_address,omitempty"`
	// Timestamp when the transaction was created
	CreatedAt *string `json:"created_at,omitempty"`
	// External transaction id
	ExternalId *string `json:"external_id,omitempty"`
	// Fees to pay on this transaction
	FeesAmount *float32 `json:"fees_amount,omitempty"`
	// Amount of the currency specified in `from_currency` that the buyer paid for the transaction
	FromAmount *float32 `json:"from_amount,omitempty"`
	// Currency that the buyer used for the transaction
	FromCurrency *string `json:"from_currency,omitempty"`
	// Minting transaction ID - see mintTokens response
	MintId *string `json:"mint_id,omitempty"`
	// Mint status
	MintStatus *string `json:"mint_status,omitempty"`
	// Temporary asset id. Might be a token id if the token id is known or a generic description if it's not
	OfferId *string `json:"offer_id,omitempty"`
	// Provider name
	Provider *string `json:"provider,omitempty"`
	// Ethereum address of the seller
	SellerWalletAddress *string `json:"seller_wallet_address,omitempty"`
	// Transaction status enums(created, waitingPayment, pending, completed, failed)
	Status *string `json:"status,omitempty"`
	// Amount of the currency specified in `to_currency` that the seller received from the checkout provider for the transaction
	ToAmount *float32 `json:"to_amount,omitempty"`
	// Currency (crypto) that the checkout provider sent to the seller for the transaction
	ToCurrency *string `json:"to_currency,omitempty"`
	// ID of the token that has been successfully minted - should be the same as `offer_id`
	TokenId *string `json:"token_id,omitempty"`
	// Transaction id
	TransactionId *string `json:"transaction_id,omitempty"`
	// Timestamp when the transaction was updated
	UpdatedAt *string `json:"updated_at,omitempty"`
	// Wallet address that receives the minted NFT
	UserWalletAddress *string `json:"user_wallet_address,omitempty"`
}

// NewNftprimarytransactionTransactionData instantiates a new NftprimarytransactionTransactionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNftprimarytransactionTransactionData() *NftprimarytransactionTransactionData {
	this := NftprimarytransactionTransactionData{}
	return &this
}

// NewNftprimarytransactionTransactionDataWithDefaults instantiates a new NftprimarytransactionTransactionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNftprimarytransactionTransactionDataWithDefaults() *NftprimarytransactionTransactionData {
	this := NftprimarytransactionTransactionData{}
	return &this
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetContractAddress() string {
	if o == nil || isNil(o.ContractAddress) {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetContractAddressOk() (*string, bool) {
	if o == nil || isNil(o.ContractAddress) {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasContractAddress() bool {
	if o != nil && !isNil(o.ContractAddress) {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *NftprimarytransactionTransactionData) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetCreatedAt() string {
	if o == nil || isNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetCreatedAtOk() (*string, bool) {
	if o == nil || isNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *NftprimarytransactionTransactionData) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetExternalId() string {
	if o == nil || isNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetExternalIdOk() (*string, bool) {
	if o == nil || isNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasExternalId() bool {
	if o != nil && !isNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *NftprimarytransactionTransactionData) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetFeesAmount returns the FeesAmount field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetFeesAmount() float32 {
	if o == nil || isNil(o.FeesAmount) {
		var ret float32
		return ret
	}
	return *o.FeesAmount
}

// GetFeesAmountOk returns a tuple with the FeesAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetFeesAmountOk() (*float32, bool) {
	if o == nil || isNil(o.FeesAmount) {
		return nil, false
	}
	return o.FeesAmount, true
}

// HasFeesAmount returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasFeesAmount() bool {
	if o != nil && !isNil(o.FeesAmount) {
		return true
	}

	return false
}

// SetFeesAmount gets a reference to the given float32 and assigns it to the FeesAmount field.
func (o *NftprimarytransactionTransactionData) SetFeesAmount(v float32) {
	o.FeesAmount = &v
}

// GetFromAmount returns the FromAmount field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetFromAmount() float32 {
	if o == nil || isNil(o.FromAmount) {
		var ret float32
		return ret
	}
	return *o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetFromAmountOk() (*float32, bool) {
	if o == nil || isNil(o.FromAmount) {
		return nil, false
	}
	return o.FromAmount, true
}

// HasFromAmount returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasFromAmount() bool {
	if o != nil && !isNil(o.FromAmount) {
		return true
	}

	return false
}

// SetFromAmount gets a reference to the given float32 and assigns it to the FromAmount field.
func (o *NftprimarytransactionTransactionData) SetFromAmount(v float32) {
	o.FromAmount = &v
}

// GetFromCurrency returns the FromCurrency field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetFromCurrency() string {
	if o == nil || isNil(o.FromCurrency) {
		var ret string
		return ret
	}
	return *o.FromCurrency
}

// GetFromCurrencyOk returns a tuple with the FromCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetFromCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.FromCurrency) {
		return nil, false
	}
	return o.FromCurrency, true
}

// HasFromCurrency returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasFromCurrency() bool {
	if o != nil && !isNil(o.FromCurrency) {
		return true
	}

	return false
}

// SetFromCurrency gets a reference to the given string and assigns it to the FromCurrency field.
func (o *NftprimarytransactionTransactionData) SetFromCurrency(v string) {
	o.FromCurrency = &v
}

// GetMintId returns the MintId field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetMintId() string {
	if o == nil || isNil(o.MintId) {
		var ret string
		return ret
	}
	return *o.MintId
}

// GetMintIdOk returns a tuple with the MintId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetMintIdOk() (*string, bool) {
	if o == nil || isNil(o.MintId) {
		return nil, false
	}
	return o.MintId, true
}

// HasMintId returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasMintId() bool {
	if o != nil && !isNil(o.MintId) {
		return true
	}

	return false
}

// SetMintId gets a reference to the given string and assigns it to the MintId field.
func (o *NftprimarytransactionTransactionData) SetMintId(v string) {
	o.MintId = &v
}

// GetMintStatus returns the MintStatus field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetMintStatus() string {
	if o == nil || isNil(o.MintStatus) {
		var ret string
		return ret
	}
	return *o.MintStatus
}

// GetMintStatusOk returns a tuple with the MintStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetMintStatusOk() (*string, bool) {
	if o == nil || isNil(o.MintStatus) {
		return nil, false
	}
	return o.MintStatus, true
}

// HasMintStatus returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasMintStatus() bool {
	if o != nil && !isNil(o.MintStatus) {
		return true
	}

	return false
}

// SetMintStatus gets a reference to the given string and assigns it to the MintStatus field.
func (o *NftprimarytransactionTransactionData) SetMintStatus(v string) {
	o.MintStatus = &v
}

// GetOfferId returns the OfferId field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetOfferId() string {
	if o == nil || isNil(o.OfferId) {
		var ret string
		return ret
	}
	return *o.OfferId
}

// GetOfferIdOk returns a tuple with the OfferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetOfferIdOk() (*string, bool) {
	if o == nil || isNil(o.OfferId) {
		return nil, false
	}
	return o.OfferId, true
}

// HasOfferId returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasOfferId() bool {
	if o != nil && !isNil(o.OfferId) {
		return true
	}

	return false
}

// SetOfferId gets a reference to the given string and assigns it to the OfferId field.
func (o *NftprimarytransactionTransactionData) SetOfferId(v string) {
	o.OfferId = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetProvider() string {
	if o == nil || isNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetProviderOk() (*string, bool) {
	if o == nil || isNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasProvider() bool {
	if o != nil && !isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *NftprimarytransactionTransactionData) SetProvider(v string) {
	o.Provider = &v
}

// GetSellerWalletAddress returns the SellerWalletAddress field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetSellerWalletAddress() string {
	if o == nil || isNil(o.SellerWalletAddress) {
		var ret string
		return ret
	}
	return *o.SellerWalletAddress
}

// GetSellerWalletAddressOk returns a tuple with the SellerWalletAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetSellerWalletAddressOk() (*string, bool) {
	if o == nil || isNil(o.SellerWalletAddress) {
		return nil, false
	}
	return o.SellerWalletAddress, true
}

// HasSellerWalletAddress returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasSellerWalletAddress() bool {
	if o != nil && !isNil(o.SellerWalletAddress) {
		return true
	}

	return false
}

// SetSellerWalletAddress gets a reference to the given string and assigns it to the SellerWalletAddress field.
func (o *NftprimarytransactionTransactionData) SetSellerWalletAddress(v string) {
	o.SellerWalletAddress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NftprimarytransactionTransactionData) SetStatus(v string) {
	o.Status = &v
}

// GetToAmount returns the ToAmount field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetToAmount() float32 {
	if o == nil || isNil(o.ToAmount) {
		var ret float32
		return ret
	}
	return *o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetToAmountOk() (*float32, bool) {
	if o == nil || isNil(o.ToAmount) {
		return nil, false
	}
	return o.ToAmount, true
}

// HasToAmount returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasToAmount() bool {
	if o != nil && !isNil(o.ToAmount) {
		return true
	}

	return false
}

// SetToAmount gets a reference to the given float32 and assigns it to the ToAmount field.
func (o *NftprimarytransactionTransactionData) SetToAmount(v float32) {
	o.ToAmount = &v
}

// GetToCurrency returns the ToCurrency field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetToCurrency() string {
	if o == nil || isNil(o.ToCurrency) {
		var ret string
		return ret
	}
	return *o.ToCurrency
}

// GetToCurrencyOk returns a tuple with the ToCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetToCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.ToCurrency) {
		return nil, false
	}
	return o.ToCurrency, true
}

// HasToCurrency returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasToCurrency() bool {
	if o != nil && !isNil(o.ToCurrency) {
		return true
	}

	return false
}

// SetToCurrency gets a reference to the given string and assigns it to the ToCurrency field.
func (o *NftprimarytransactionTransactionData) SetToCurrency(v string) {
	o.ToCurrency = &v
}

// GetTokenId returns the TokenId field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetTokenId() string {
	if o == nil || isNil(o.TokenId) {
		var ret string
		return ret
	}
	return *o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetTokenIdOk() (*string, bool) {
	if o == nil || isNil(o.TokenId) {
		return nil, false
	}
	return o.TokenId, true
}

// HasTokenId returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasTokenId() bool {
	if o != nil && !isNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given string and assigns it to the TokenId field.
func (o *NftprimarytransactionTransactionData) SetTokenId(v string) {
	o.TokenId = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetTransactionId() string {
	if o == nil || isNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetTransactionIdOk() (*string, bool) {
	if o == nil || isNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasTransactionId() bool {
	if o != nil && !isNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *NftprimarytransactionTransactionData) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetUpdatedAt() string {
	if o == nil || isNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetUpdatedAtOk() (*string, bool) {
	if o == nil || isNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *NftprimarytransactionTransactionData) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUserWalletAddress returns the UserWalletAddress field value if set, zero value otherwise.
func (o *NftprimarytransactionTransactionData) GetUserWalletAddress() string {
	if o == nil || isNil(o.UserWalletAddress) {
		var ret string
		return ret
	}
	return *o.UserWalletAddress
}

// GetUserWalletAddressOk returns a tuple with the UserWalletAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NftprimarytransactionTransactionData) GetUserWalletAddressOk() (*string, bool) {
	if o == nil || isNil(o.UserWalletAddress) {
		return nil, false
	}
	return o.UserWalletAddress, true
}

// HasUserWalletAddress returns a boolean if a field has been set.
func (o *NftprimarytransactionTransactionData) HasUserWalletAddress() bool {
	if o != nil && !isNil(o.UserWalletAddress) {
		return true
	}

	return false
}

// SetUserWalletAddress gets a reference to the given string and assigns it to the UserWalletAddress field.
func (o *NftprimarytransactionTransactionData) SetUserWalletAddress(v string) {
	o.UserWalletAddress = &v
}

func (o NftprimarytransactionTransactionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NftprimarytransactionTransactionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ContractAddress) {
		toSerialize["contract_address"] = o.ContractAddress
	}
	if !isNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !isNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !isNil(o.FeesAmount) {
		toSerialize["fees_amount"] = o.FeesAmount
	}
	if !isNil(o.FromAmount) {
		toSerialize["from_amount"] = o.FromAmount
	}
	if !isNil(o.FromCurrency) {
		toSerialize["from_currency"] = o.FromCurrency
	}
	if !isNil(o.MintId) {
		toSerialize["mint_id"] = o.MintId
	}
	if !isNil(o.MintStatus) {
		toSerialize["mint_status"] = o.MintStatus
	}
	if !isNil(o.OfferId) {
		toSerialize["offer_id"] = o.OfferId
	}
	if !isNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !isNil(o.SellerWalletAddress) {
		toSerialize["seller_wallet_address"] = o.SellerWalletAddress
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.ToAmount) {
		toSerialize["to_amount"] = o.ToAmount
	}
	if !isNil(o.ToCurrency) {
		toSerialize["to_currency"] = o.ToCurrency
	}
	if !isNil(o.TokenId) {
		toSerialize["token_id"] = o.TokenId
	}
	if !isNil(o.TransactionId) {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !isNil(o.UserWalletAddress) {
		toSerialize["user_wallet_address"] = o.UserWalletAddress
	}
	return toSerialize, nil
}

type NullableNftprimarytransactionTransactionData struct {
	value *NftprimarytransactionTransactionData
	isSet bool
}

func (v NullableNftprimarytransactionTransactionData) Get() *NftprimarytransactionTransactionData {
	return v.value
}

func (v *NullableNftprimarytransactionTransactionData) Set(val *NftprimarytransactionTransactionData) {
	v.value = val
	v.isSet = true
}

func (v NullableNftprimarytransactionTransactionData) IsSet() bool {
	return v.isSet
}

func (v *NullableNftprimarytransactionTransactionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNftprimarytransactionTransactionData(val *NftprimarytransactionTransactionData) *NullableNftprimarytransactionTransactionData {
	return &NullableNftprimarytransactionTransactionData{value: val, isSet: true}
}

func (v NullableNftprimarytransactionTransactionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNftprimarytransactionTransactionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


