/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	// The current period expiry date for collection limit
	CollectionLimitExpiresAt string `json:"collection_limit_expires_at"`
	// The total monthly collection limit
	CollectionMonthlyLimit int32 `json:"collection_monthly_limit"`
	// The number of collection remaining in the current period
	CollectionRemaining int32 `json:"collection_remaining"`
	// The company name
	CompanyName string `json:"company_name"`
	// The project contact email (must be registered as a developer account with Immutable at https://hub.immutable.com)
	ContactEmail string `json:"contact_email"`
	// The project ID
	Id int32 `json:"id"`
	// The current period expiry date for mint operation limit
	MintLimitExpiresAt string `json:"mint_limit_expires_at"`
	// The total monthly mint operation limit
	MintMonthlyLimit int32 `json:"mint_monthly_limit"`
	// The number of mint operation remaining in the current period
	MintRemaining int32 `json:"mint_remaining"`
	// The project name
	Name string `json:"name"`
}

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject(collectionLimitExpiresAt string, collectionMonthlyLimit int32, collectionRemaining int32, companyName string, contactEmail string, id int32, mintLimitExpiresAt string, mintMonthlyLimit int32, mintRemaining int32, name string) *Project {
	this := Project{}
	this.CollectionLimitExpiresAt = collectionLimitExpiresAt
	this.CollectionMonthlyLimit = collectionMonthlyLimit
	this.CollectionRemaining = collectionRemaining
	this.CompanyName = companyName
	this.ContactEmail = contactEmail
	this.Id = id
	this.MintLimitExpiresAt = mintLimitExpiresAt
	this.MintMonthlyLimit = mintMonthlyLimit
	this.MintRemaining = mintRemaining
	this.Name = name
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetCollectionLimitExpiresAt returns the CollectionLimitExpiresAt field value
func (o *Project) GetCollectionLimitExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectionLimitExpiresAt
}

// GetCollectionLimitExpiresAtOk returns a tuple with the CollectionLimitExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Project) GetCollectionLimitExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionLimitExpiresAt, true
}

// SetCollectionLimitExpiresAt sets field value
func (o *Project) SetCollectionLimitExpiresAt(v string) {
	o.CollectionLimitExpiresAt = v
}

// GetCollectionMonthlyLimit returns the CollectionMonthlyLimit field value
func (o *Project) GetCollectionMonthlyLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CollectionMonthlyLimit
}

// GetCollectionMonthlyLimitOk returns a tuple with the CollectionMonthlyLimit field value
// and a boolean to check if the value has been set.
func (o *Project) GetCollectionMonthlyLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionMonthlyLimit, true
}

// SetCollectionMonthlyLimit sets field value
func (o *Project) SetCollectionMonthlyLimit(v int32) {
	o.CollectionMonthlyLimit = v
}

// GetCollectionRemaining returns the CollectionRemaining field value
func (o *Project) GetCollectionRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CollectionRemaining
}

// GetCollectionRemainingOk returns a tuple with the CollectionRemaining field value
// and a boolean to check if the value has been set.
func (o *Project) GetCollectionRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionRemaining, true
}

// SetCollectionRemaining sets field value
func (o *Project) SetCollectionRemaining(v int32) {
	o.CollectionRemaining = v
}

// GetCompanyName returns the CompanyName field value
func (o *Project) GetCompanyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value
// and a boolean to check if the value has been set.
func (o *Project) GetCompanyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyName, true
}

// SetCompanyName sets field value
func (o *Project) SetCompanyName(v string) {
	o.CompanyName = v
}

// GetContactEmail returns the ContactEmail field value
func (o *Project) GetContactEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value
// and a boolean to check if the value has been set.
func (o *Project) GetContactEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContactEmail, true
}

// SetContactEmail sets field value
func (o *Project) SetContactEmail(v string) {
	o.ContactEmail = v
}

// GetId returns the Id field value
func (o *Project) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Project) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Project) SetId(v int32) {
	o.Id = v
}

// GetMintLimitExpiresAt returns the MintLimitExpiresAt field value
func (o *Project) GetMintLimitExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MintLimitExpiresAt
}

// GetMintLimitExpiresAtOk returns a tuple with the MintLimitExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Project) GetMintLimitExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintLimitExpiresAt, true
}

// SetMintLimitExpiresAt sets field value
func (o *Project) SetMintLimitExpiresAt(v string) {
	o.MintLimitExpiresAt = v
}

// GetMintMonthlyLimit returns the MintMonthlyLimit field value
func (o *Project) GetMintMonthlyLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MintMonthlyLimit
}

// GetMintMonthlyLimitOk returns a tuple with the MintMonthlyLimit field value
// and a boolean to check if the value has been set.
func (o *Project) GetMintMonthlyLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintMonthlyLimit, true
}

// SetMintMonthlyLimit sets field value
func (o *Project) SetMintMonthlyLimit(v int32) {
	o.MintMonthlyLimit = v
}

// GetMintRemaining returns the MintRemaining field value
func (o *Project) GetMintRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MintRemaining
}

// GetMintRemainingOk returns a tuple with the MintRemaining field value
// and a boolean to check if the value has been set.
func (o *Project) GetMintRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MintRemaining, true
}

// SetMintRemaining sets field value
func (o *Project) SetMintRemaining(v int32) {
	o.MintRemaining = v
}

// GetName returns the Name field value
func (o *Project) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Project) SetName(v string) {
	o.Name = v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collection_limit_expires_at"] = o.CollectionLimitExpiresAt
	toSerialize["collection_monthly_limit"] = o.CollectionMonthlyLimit
	toSerialize["collection_remaining"] = o.CollectionRemaining
	toSerialize["company_name"] = o.CompanyName
	toSerialize["contact_email"] = o.ContactEmail
	toSerialize["id"] = o.Id
	toSerialize["mint_limit_expires_at"] = o.MintLimitExpiresAt
	toSerialize["mint_monthly_limit"] = o.MintMonthlyLimit
	toSerialize["mint_remaining"] = o.MintRemaining
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


