/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GetSignableRegistrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSignableRegistrationRequest{}

// GetSignableRegistrationRequest struct for GetSignableRegistrationRequest
type GetSignableRegistrationRequest struct {
	// Ether key of user
	EtherKey string `json:"ether_key"`
	// Public stark key of the user
	StarkKey string `json:"stark_key"`
}

// NewGetSignableRegistrationRequest instantiates a new GetSignableRegistrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSignableRegistrationRequest(etherKey string, starkKey string) *GetSignableRegistrationRequest {
	this := GetSignableRegistrationRequest{}
	this.EtherKey = etherKey
	this.StarkKey = starkKey
	return &this
}

// NewGetSignableRegistrationRequestWithDefaults instantiates a new GetSignableRegistrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSignableRegistrationRequestWithDefaults() *GetSignableRegistrationRequest {
	this := GetSignableRegistrationRequest{}
	return &this
}

// GetEtherKey returns the EtherKey field value
func (o *GetSignableRegistrationRequest) GetEtherKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EtherKey
}

// GetEtherKeyOk returns a tuple with the EtherKey field value
// and a boolean to check if the value has been set.
func (o *GetSignableRegistrationRequest) GetEtherKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EtherKey, true
}

// SetEtherKey sets field value
func (o *GetSignableRegistrationRequest) SetEtherKey(v string) {
	o.EtherKey = v
}

// GetStarkKey returns the StarkKey field value
func (o *GetSignableRegistrationRequest) GetStarkKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StarkKey
}

// GetStarkKeyOk returns a tuple with the StarkKey field value
// and a boolean to check if the value has been set.
func (o *GetSignableRegistrationRequest) GetStarkKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StarkKey, true
}

// SetStarkKey sets field value
func (o *GetSignableRegistrationRequest) SetStarkKey(v string) {
	o.StarkKey = v
}

func (o GetSignableRegistrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSignableRegistrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ether_key"] = o.EtherKey
	toSerialize["stark_key"] = o.StarkKey
	return toSerialize, nil
}

type NullableGetSignableRegistrationRequest struct {
	value *GetSignableRegistrationRequest
	isSet bool
}

func (v NullableGetSignableRegistrationRequest) Get() *GetSignableRegistrationRequest {
	return v.value
}

func (v *NullableGetSignableRegistrationRequest) Set(val *GetSignableRegistrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSignableRegistrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSignableRegistrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSignableRegistrationRequest(val *GetSignableRegistrationRequest) *NullableGetSignableRegistrationRequest {
	return &NullableGetSignableRegistrationRequest{value: val, isSet: true}
}

func (v NullableGetSignableRegistrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSignableRegistrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


