/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// WidgetParams struct for WidgetParams
type WidgetParams struct {
	// Amount that will be prefilled in the widget
	Amount *string `json:"amount,omitempty"`
	// Currencies that will be available in the widget. If not defined all available currencies will be shown
	SupportedCurrencies []string `json:"supported_currencies,omitempty"`
	// Widget theme dark by default
	Theme *string `json:"theme,omitempty"`
}

// NewWidgetParams instantiates a new WidgetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetParams() *WidgetParams {
	this := WidgetParams{}
	return &this
}

// NewWidgetParamsWithDefaults instantiates a new WidgetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetParamsWithDefaults() *WidgetParams {
	this := WidgetParams{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *WidgetParams) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetParams) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *WidgetParams) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *WidgetParams) SetAmount(v string) {
	o.Amount = &v
}

// GetSupportedCurrencies returns the SupportedCurrencies field value if set, zero value otherwise.
func (o *WidgetParams) GetSupportedCurrencies() []string {
	if o == nil || o.SupportedCurrencies == nil {
		var ret []string
		return ret
	}
	return o.SupportedCurrencies
}

// GetSupportedCurrenciesOk returns a tuple with the SupportedCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetParams) GetSupportedCurrenciesOk() ([]string, bool) {
	if o == nil || o.SupportedCurrencies == nil {
		return nil, false
	}
	return o.SupportedCurrencies, true
}

// HasSupportedCurrencies returns a boolean if a field has been set.
func (o *WidgetParams) HasSupportedCurrencies() bool {
	if o != nil && o.SupportedCurrencies != nil {
		return true
	}

	return false
}

// SetSupportedCurrencies gets a reference to the given []string and assigns it to the SupportedCurrencies field.
func (o *WidgetParams) SetSupportedCurrencies(v []string) {
	o.SupportedCurrencies = v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *WidgetParams) GetTheme() string {
	if o == nil || o.Theme == nil {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetParams) GetThemeOk() (*string, bool) {
	if o == nil || o.Theme == nil {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *WidgetParams) HasTheme() bool {
	if o != nil && o.Theme != nil {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *WidgetParams) SetTheme(v string) {
	o.Theme = &v
}

func (o WidgetParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.SupportedCurrencies != nil {
		toSerialize["supported_currencies"] = o.SupportedCurrencies
	}
	if o.Theme != nil {
		toSerialize["theme"] = o.Theme
	}
	return json.Marshal(toSerialize)
}

type NullableWidgetParams struct {
	value *WidgetParams
	isSet bool
}

func (v NullableWidgetParams) Get() *WidgetParams {
	return v.value
}

func (v *NullableWidgetParams) Set(val *WidgetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetParams(val *WidgetParams) *NullableWidgetParams {
	return &NullableWidgetParams{value: val, isSet: true}
}

func (v NullableWidgetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


