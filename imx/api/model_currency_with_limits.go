/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CurrencyWithLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyWithLimits{}

// CurrencyWithLimits struct for CurrencyWithLimits
type CurrencyWithLimits struct {
	// Provider currency code
	CurrencyCode *string `json:"currency_code,omitempty"`
	Limits *AggregateLimit `json:"limits,omitempty"`
	// Provider name (e.g. moonpay)
	Provider *string `json:"provider,omitempty"`
	// Currency Symbol
	Symbol *string `json:"symbol,omitempty"`
}

// NewCurrencyWithLimits instantiates a new CurrencyWithLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyWithLimits() *CurrencyWithLimits {
	this := CurrencyWithLimits{}
	return &this
}

// NewCurrencyWithLimitsWithDefaults instantiates a new CurrencyWithLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyWithLimitsWithDefaults() *CurrencyWithLimits {
	this := CurrencyWithLimits{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CurrencyWithLimits) GetCurrencyCode() string {
	if o == nil || isNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyWithLimits) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || isNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CurrencyWithLimits) HasCurrencyCode() bool {
	if o != nil && !isNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CurrencyWithLimits) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *CurrencyWithLimits) GetLimits() AggregateLimit {
	if o == nil || isNil(o.Limits) {
		var ret AggregateLimit
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyWithLimits) GetLimitsOk() (*AggregateLimit, bool) {
	if o == nil || isNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *CurrencyWithLimits) HasLimits() bool {
	if o != nil && !isNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given AggregateLimit and assigns it to the Limits field.
func (o *CurrencyWithLimits) SetLimits(v AggregateLimit) {
	o.Limits = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *CurrencyWithLimits) GetProvider() string {
	if o == nil || isNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyWithLimits) GetProviderOk() (*string, bool) {
	if o == nil || isNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *CurrencyWithLimits) HasProvider() bool {
	if o != nil && !isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *CurrencyWithLimits) SetProvider(v string) {
	o.Provider = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CurrencyWithLimits) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyWithLimits) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CurrencyWithLimits) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CurrencyWithLimits) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CurrencyWithLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyWithLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CurrencyCode) {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if !isNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !isNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableCurrencyWithLimits struct {
	value *CurrencyWithLimits
	isSet bool
}

func (v NullableCurrencyWithLimits) Get() *CurrencyWithLimits {
	return v.value
}

func (v *NullableCurrencyWithLimits) Set(val *CurrencyWithLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyWithLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyWithLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyWithLimits(val *CurrencyWithLimits) *NullableCurrencyWithLimits {
	return &NullableCurrencyWithLimits{value: val, isSet: true}
}

func (v NullableCurrencyWithLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyWithLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


