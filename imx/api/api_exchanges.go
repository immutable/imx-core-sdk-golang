/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type ExchangesApi interface {

	/*
	CreateExchange Create an exchange with URL

	Receive wallet_address, provider, type and widget information to create a base exchange transaction and return widget URL

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateExchangeRequest
	*/
	CreateExchange(ctx context.Context) ApiCreateExchangeRequest

	// CreateExchangeExecute executes the request
	//  @return ExchangeCreateExchangeAndURLResponse
	CreateExchangeExecute(r ApiCreateExchangeRequest) (*ExchangeCreateExchangeAndURLResponse, *http.Response, error)

	/*
	CreateExchangeTransfer Accepts a transfer request and updates the transfer_status after processing transfer (offramp)

	Accepts a transfer request and updates the transfer_status after processing transfer (offramp)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Transaction ID
	@return ApiCreateExchangeTransferRequest
	*/
	CreateExchangeTransfer(ctx context.Context, id string) ApiCreateExchangeTransferRequest

	// CreateExchangeTransferExecute executes the request
	//  @return CreateTransferResponseV1
	CreateExchangeTransferExecute(r ApiCreateExchangeTransferRequest) (*CreateTransferResponseV1, *http.Response, error)

	/*
	GetExchange Get an exchange by ID

	Get an exchange by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Exchange ID
	@return ApiGetExchangeRequest
	*/
	GetExchange(ctx context.Context, id string) ApiGetExchangeRequest

	// GetExchangeExecute executes the request
	//  @return Exchange
	GetExchangeExecute(r ApiGetExchangeRequest) (*Exchange, *http.Response, error)

	/*
	GetExchangeSignableTransfer Send a request for signable-transfer-details (offramp)

	Send a request for signable-transfer-details (offramp)

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Transaction ID
	@return ApiGetExchangeSignableTransferRequest
	*/
	GetExchangeSignableTransfer(ctx context.Context, id string) ApiGetExchangeSignableTransferRequest

	// GetExchangeSignableTransferExecute executes the request
	//  @return GetSignableTransferResponseV1
	GetExchangeSignableTransferExecute(r ApiGetExchangeSignableTransferRequest) (*GetSignableTransferResponseV1, *http.Response, error)

	/*
	GetExchanges Returns a list of exchanges based on the request

	Returns a list of exchanges based on the request

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExchangesRequest
	*/
	GetExchanges(ctx context.Context) ApiGetExchangesRequest

	// GetExchangesExecute executes the request
	//  @return GetTransactionsResponse
	GetExchangesExecute(r ApiGetExchangesRequest) (*GetTransactionsResponse, *http.Response, error)
}

// ExchangesApiService ExchangesApi service
type ExchangesApiService service

type ApiCreateExchangeRequest struct {
	ctx context.Context
	ApiService ExchangesApi
	createExchangeAPIRequest *CreateExchangeAndURLAPIRequest
}

// req
func (r ApiCreateExchangeRequest) CreateExchangeAPIRequest(createExchangeAPIRequest CreateExchangeAndURLAPIRequest) ApiCreateExchangeRequest {
	r.createExchangeAPIRequest = &createExchangeAPIRequest
	return r
}

func (r ApiCreateExchangeRequest) Execute() (*ExchangeCreateExchangeAndURLResponse, *http.Response, error) {
	return r.ApiService.CreateExchangeExecute(r)
}

/*
CreateExchange Create an exchange with URL

Receive wallet_address, provider, type and widget information to create a base exchange transaction and return widget URL

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateExchangeRequest
*/
func (a *ExchangesApiService) CreateExchange(ctx context.Context) ApiCreateExchangeRequest {
	return ApiCreateExchangeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExchangeCreateExchangeAndURLResponse
func (a *ExchangesApiService) CreateExchangeExecute(r ApiCreateExchangeRequest) (*ExchangeCreateExchangeAndURLResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExchangeCreateExchangeAndURLResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangesApiService.CreateExchange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/exchanges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createExchangeAPIRequest == nil {
		return localVarReturnValue, nil, reportError("createExchangeAPIRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createExchangeAPIRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LambdasAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateExchangeTransferRequest struct {
	ctx context.Context
	ApiService ExchangesApi
	id string
	xImxEthAddress *string
	xImxEthSignature *string
	createTransferRequest *CreateTransferRequestV1
}

// eth address
func (r ApiCreateExchangeTransferRequest) XImxEthAddress(xImxEthAddress string) ApiCreateExchangeTransferRequest {
	r.xImxEthAddress = &xImxEthAddress
	return r
}

// eth signature
func (r ApiCreateExchangeTransferRequest) XImxEthSignature(xImxEthSignature string) ApiCreateExchangeTransferRequest {
	r.xImxEthSignature = &xImxEthSignature
	return r
}

// Create a transfer
func (r ApiCreateExchangeTransferRequest) CreateTransferRequest(createTransferRequest CreateTransferRequestV1) ApiCreateExchangeTransferRequest {
	r.createTransferRequest = &createTransferRequest
	return r
}

func (r ApiCreateExchangeTransferRequest) Execute() (*CreateTransferResponseV1, *http.Response, error) {
	return r.ApiService.CreateExchangeTransferExecute(r)
}

/*
CreateExchangeTransfer Accepts a transfer request and updates the transfer_status after processing transfer (offramp)

Accepts a transfer request and updates the transfer_status after processing transfer (offramp)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Transaction ID
 @return ApiCreateExchangeTransferRequest
*/
func (a *ExchangesApiService) CreateExchangeTransfer(ctx context.Context, id string) ApiCreateExchangeTransferRequest {
	return ApiCreateExchangeTransferRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CreateTransferResponseV1
func (a *ExchangesApiService) CreateExchangeTransferExecute(r ApiCreateExchangeTransferRequest) (*CreateTransferResponseV1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateTransferResponseV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangesApiService.CreateExchangeTransfer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/exchanges/{id}/transfers"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xImxEthAddress == nil {
		return localVarReturnValue, nil, reportError("xImxEthAddress is required and must be specified")
	}
	if r.xImxEthSignature == nil {
		return localVarReturnValue, nil, reportError("xImxEthSignature is required and must be specified")
	}
	if r.createTransferRequest == nil {
		return localVarReturnValue, nil, reportError("createTransferRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-imx-eth-address"] = parameterToString(*r.xImxEthAddress, "")
	localVarHeaderParams["x-imx-eth-signature"] = parameterToString(*r.xImxEthSignature, "")
	// body params
	localVarPostBody = r.createTransferRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LambdasAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExchangeRequest struct {
	ctx context.Context
	ApiService ExchangesApi
	id string
}

func (r ApiGetExchangeRequest) Execute() (*Exchange, *http.Response, error) {
	return r.ApiService.GetExchangeExecute(r)
}

/*
GetExchange Get an exchange by ID

Get an exchange by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Exchange ID
 @return ApiGetExchangeRequest
*/
func (a *ExchangesApiService) GetExchange(ctx context.Context, id string) ApiGetExchangeRequest {
	return ApiGetExchangeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Exchange
func (a *ExchangesApiService) GetExchangeExecute(r ApiGetExchangeRequest) (*Exchange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Exchange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangesApiService.GetExchange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/exchanges/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LambdasAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v LambdasAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExchangeSignableTransferRequest struct {
	ctx context.Context
	ApiService ExchangesApi
	id string
	getSignableTransferRequest *GetSignableTransferRequestV1
}

// get details of signable transfer
func (r ApiGetExchangeSignableTransferRequest) GetSignableTransferRequest(getSignableTransferRequest GetSignableTransferRequestV1) ApiGetExchangeSignableTransferRequest {
	r.getSignableTransferRequest = &getSignableTransferRequest
	return r
}

func (r ApiGetExchangeSignableTransferRequest) Execute() (*GetSignableTransferResponseV1, *http.Response, error) {
	return r.ApiService.GetExchangeSignableTransferExecute(r)
}

/*
GetExchangeSignableTransfer Send a request for signable-transfer-details (offramp)

Send a request for signable-transfer-details (offramp)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Transaction ID
 @return ApiGetExchangeSignableTransferRequest
*/
func (a *ExchangesApiService) GetExchangeSignableTransfer(ctx context.Context, id string) ApiGetExchangeSignableTransferRequest {
	return ApiGetExchangeSignableTransferRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetSignableTransferResponseV1
func (a *ExchangesApiService) GetExchangeSignableTransferExecute(r ApiGetExchangeSignableTransferRequest) (*GetSignableTransferResponseV1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSignableTransferResponseV1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangesApiService.GetExchangeSignableTransfer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/exchanges/{id}/signable-transfer-details"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getSignableTransferRequest == nil {
		return localVarReturnValue, nil, reportError("getSignableTransferRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getSignableTransferRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LambdasAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExchangesRequest struct {
	ctx context.Context
	ApiService ExchangesApi
	pageSize *int32
	cursor *string
	orderBy *string
	direction *string
	id *int32
	walletAddress *string
	status *string
	provider *string
	transferId *string
}

// Page size of the result
func (r ApiGetExchangesRequest) PageSize(pageSize int32) ApiGetExchangesRequest {
	r.pageSize = &pageSize
	return r
}

// Cursor
func (r ApiGetExchangesRequest) Cursor(cursor string) ApiGetExchangesRequest {
	r.cursor = &cursor
	return r
}

// Property to sort by
func (r ApiGetExchangesRequest) OrderBy(orderBy string) ApiGetExchangesRequest {
	r.orderBy = &orderBy
	return r
}

// Direction to sort
func (r ApiGetExchangesRequest) Direction(direction string) ApiGetExchangesRequest {
	r.direction = &direction
	return r
}

// Transaction ID
func (r ApiGetExchangesRequest) Id(id int32) ApiGetExchangesRequest {
	r.id = &id
	return r
}

// Ethereum address of the user who created transaction
func (r ApiGetExchangesRequest) WalletAddress(walletAddress string) ApiGetExchangesRequest {
	r.walletAddress = &walletAddress
	return r
}

// Transaction status
func (r ApiGetExchangesRequest) Status(status string) ApiGetExchangesRequest {
	r.status = &status
	return r
}

// Provider name
func (r ApiGetExchangesRequest) Provider(provider string) ApiGetExchangesRequest {
	r.provider = &provider
	return r
}

// Transfer ID
func (r ApiGetExchangesRequest) TransferId(transferId string) ApiGetExchangesRequest {
	r.transferId = &transferId
	return r
}

func (r ApiGetExchangesRequest) Execute() (*GetTransactionsResponse, *http.Response, error) {
	return r.ApiService.GetExchangesExecute(r)
}

/*
GetExchanges Returns a list of exchanges based on the request

Returns a list of exchanges based on the request

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExchangesRequest
*/
func (a *ExchangesApiService) GetExchanges(ctx context.Context) ApiGetExchangesRequest {
	return ApiGetExchangesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetTransactionsResponse
func (a *ExchangesApiService) GetExchangesExecute(r ApiGetExchangesRequest) (*GetTransactionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetTransactionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangesApiService.GetExchanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/exchanges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.walletAddress != nil {
		localVarQueryParams.Add("wallet_address", parameterToString(*r.walletAddress, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.provider != nil {
		localVarQueryParams.Add("provider", parameterToString(*r.provider, ""))
	}
	if r.transferId != nil {
		localVarQueryParams.Add("transfer_id", parameterToString(*r.transferId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v LambdasAPIError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
