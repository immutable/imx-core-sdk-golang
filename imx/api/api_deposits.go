/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type DepositsApi interface {

	/*
	GetDeposit Get details of a deposit with the given ID

	Get details of a deposit with the given ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Deposit ID
	@return ApiGetDepositRequest
	*/
	GetDeposit(ctx context.Context, id string) ApiGetDepositRequest

	// GetDepositExecute executes the request
	//  @return Deposit
	GetDepositExecute(r ApiGetDepositRequest) (*Deposit, *http.Response, error)

	/*
	GetSignableDeposit Gets details of a signable deposit

	Gets details of a signable deposit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSignableDepositRequest
	*/
	GetSignableDeposit(ctx context.Context) ApiGetSignableDepositRequest

	// GetSignableDepositExecute executes the request
	//  @return GetSignableDepositResponse
	GetSignableDepositExecute(r ApiGetSignableDepositRequest) (*GetSignableDepositResponse, *http.Response, error)

	/*
	ListDeposits Get a list of deposits

	Get a list of deposits

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListDepositsRequest
	*/
	ListDeposits(ctx context.Context) ApiListDepositsRequest

	// ListDepositsExecute executes the request
	//  @return ListDepositsResponse
	ListDepositsExecute(r ApiListDepositsRequest) (*ListDepositsResponse, *http.Response, error)
}

// DepositsApiService DepositsApi service
type DepositsApiService service

type ApiGetDepositRequest struct {
	ctx context.Context
	ApiService DepositsApi
	id string
}

func (r ApiGetDepositRequest) Execute() (*Deposit, *http.Response, error) {
	return r.ApiService.GetDepositExecute(r)
}

/*
GetDeposit Get details of a deposit with the given ID

Get details of a deposit with the given ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Deposit ID
 @return ApiGetDepositRequest
*/
func (a *DepositsApiService) GetDeposit(ctx context.Context, id string) ApiGetDepositRequest {
	return ApiGetDepositRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Deposit
func (a *DepositsApiService) GetDepositExecute(r ApiGetDepositRequest) (*Deposit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Deposit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositsApiService.GetDeposit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/deposits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSignableDepositRequest struct {
	ctx context.Context
	ApiService DepositsApi
	getSignableDepositRequest *GetSignableDepositRequest
}

// Get details of signable deposit
func (r ApiGetSignableDepositRequest) GetSignableDepositRequest(getSignableDepositRequest GetSignableDepositRequest) ApiGetSignableDepositRequest {
	r.getSignableDepositRequest = &getSignableDepositRequest
	return r
}

func (r ApiGetSignableDepositRequest) Execute() (*GetSignableDepositResponse, *http.Response, error) {
	return r.ApiService.GetSignableDepositExecute(r)
}

/*
GetSignableDeposit Gets details of a signable deposit

Gets details of a signable deposit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSignableDepositRequest
*/
func (a *DepositsApiService) GetSignableDeposit(ctx context.Context) ApiGetSignableDepositRequest {
	return ApiGetSignableDepositRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetSignableDepositResponse
func (a *DepositsApiService) GetSignableDepositExecute(r ApiGetSignableDepositRequest) (*GetSignableDepositResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSignableDepositResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositsApiService.GetSignableDeposit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/signable-deposit-details"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getSignableDepositRequest == nil {
		return localVarReturnValue, nil, reportError("getSignableDepositRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getSignableDepositRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDepositsRequest struct {
	ctx context.Context
	ApiService DepositsApi
	pageSize *int32
	cursor *string
	orderBy *string
	direction *string
	user *string
	status *string
	updatedMinTimestamp *string
	updatedMaxTimestamp *string
	tokenType *string
	tokenId *string
	assetId *string
	tokenAddress *string
	tokenName *string
	minQuantity *string
	maxQuantity *string
	metadata *string
}

// Page size of the result
func (r ApiListDepositsRequest) PageSize(pageSize int32) ApiListDepositsRequest {
	r.pageSize = &pageSize
	return r
}

// Cursor
func (r ApiListDepositsRequest) Cursor(cursor string) ApiListDepositsRequest {
	r.cursor = &cursor
	return r
}

// Property to sort by
func (r ApiListDepositsRequest) OrderBy(orderBy string) ApiListDepositsRequest {
	r.orderBy = &orderBy
	return r
}

// Direction to sort (asc/desc)
func (r ApiListDepositsRequest) Direction(direction string) ApiListDepositsRequest {
	r.direction = &direction
	return r
}

// Ethereum address of the user who submitted this deposit
func (r ApiListDepositsRequest) User(user string) ApiListDepositsRequest {
	r.user = &user
	return r
}

// Status of this deposit
func (r ApiListDepositsRequest) Status(status string) ApiListDepositsRequest {
	r.status = &status
	return r
}

// Minimum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39;
func (r ApiListDepositsRequest) UpdatedMinTimestamp(updatedMinTimestamp string) ApiListDepositsRequest {
	r.updatedMinTimestamp = &updatedMinTimestamp
	return r
}

// Maximum timestamp for this deposit, in ISO 8601 UTC format. Example: &#39;2022-05-27T00:10:22Z&#39;
func (r ApiListDepositsRequest) UpdatedMaxTimestamp(updatedMaxTimestamp string) ApiListDepositsRequest {
	r.updatedMaxTimestamp = &updatedMaxTimestamp
	return r
}

// Token type of the deposited asset
func (r ApiListDepositsRequest) TokenType(tokenType string) ApiListDepositsRequest {
	r.tokenType = &tokenType
	return r
}

// ERC721 Token ID of the minted asset
func (r ApiListDepositsRequest) TokenId(tokenId string) ApiListDepositsRequest {
	r.tokenId = &tokenId
	return r
}

// Internal IMX ID of the minted asset
func (r ApiListDepositsRequest) AssetId(assetId string) ApiListDepositsRequest {
	r.assetId = &assetId
	return r
}

// Token address of the deposited asset
func (r ApiListDepositsRequest) TokenAddress(tokenAddress string) ApiListDepositsRequest {
	r.tokenAddress = &tokenAddress
	return r
}

// Token name of the deposited asset
func (r ApiListDepositsRequest) TokenName(tokenName string) ApiListDepositsRequest {
	r.tokenName = &tokenName
	return r
}

// Min quantity for the deposited asset
func (r ApiListDepositsRequest) MinQuantity(minQuantity string) ApiListDepositsRequest {
	r.minQuantity = &minQuantity
	return r
}

// Max quantity for the deposited asset
func (r ApiListDepositsRequest) MaxQuantity(maxQuantity string) ApiListDepositsRequest {
	r.maxQuantity = &maxQuantity
	return r
}

// JSON-encoded metadata filters for the deposited asset
func (r ApiListDepositsRequest) Metadata(metadata string) ApiListDepositsRequest {
	r.metadata = &metadata
	return r
}

func (r ApiListDepositsRequest) Execute() (*ListDepositsResponse, *http.Response, error) {
	return r.ApiService.ListDepositsExecute(r)
}

/*
ListDeposits Get a list of deposits

Get a list of deposits

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDepositsRequest
*/
func (a *DepositsApiService) ListDeposits(ctx context.Context) ApiListDepositsRequest {
	return ApiListDepositsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListDepositsResponse
func (a *DepositsApiService) ListDepositsExecute(r ApiListDepositsRequest) (*ListDepositsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListDepositsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositsApiService.ListDeposits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/deposits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.user != nil {
		localVarQueryParams.Add("user", parameterToString(*r.user, ""))
	}
	if r.status != nil {
		localVarQueryParams.Add("status", parameterToString(*r.status, ""))
	}
	if r.updatedMinTimestamp != nil {
		localVarQueryParams.Add("updated_min_timestamp", parameterToString(*r.updatedMinTimestamp, ""))
	}
	if r.updatedMaxTimestamp != nil {
		localVarQueryParams.Add("updated_max_timestamp", parameterToString(*r.updatedMaxTimestamp, ""))
	}
	if r.tokenType != nil {
		localVarQueryParams.Add("token_type", parameterToString(*r.tokenType, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("token_id", parameterToString(*r.tokenId, ""))
	}
	if r.assetId != nil {
		localVarQueryParams.Add("asset_id", parameterToString(*r.assetId, ""))
	}
	if r.tokenAddress != nil {
		localVarQueryParams.Add("token_address", parameterToString(*r.tokenAddress, ""))
	}
	if r.tokenName != nil {
		localVarQueryParams.Add("token_name", parameterToString(*r.tokenName, ""))
	}
	if r.minQuantity != nil {
		localVarQueryParams.Add("min_quantity", parameterToString(*r.minQuantity, ""))
	}
	if r.maxQuantity != nil {
		localVarQueryParams.Add("max_quantity", parameterToString(*r.maxQuantity, ""))
	}
	if r.metadata != nil {
		localVarQueryParams.Add("metadata", parameterToString(*r.metadata, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
