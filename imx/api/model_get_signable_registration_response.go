/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// GetSignableRegistrationResponse struct for GetSignableRegistrationResponse
type GetSignableRegistrationResponse struct {
	// Signature from authorised operator
	OperatorSignature string `json:"operator_signature"`
	// Hash of the payload to be signed for user registration
	PayloadHash string `json:"payload_hash"`
}

// NewGetSignableRegistrationResponse instantiates a new GetSignableRegistrationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSignableRegistrationResponse(operatorSignature string, payloadHash string) *GetSignableRegistrationResponse {
	this := GetSignableRegistrationResponse{}
	this.OperatorSignature = operatorSignature
	this.PayloadHash = payloadHash
	return &this
}

// NewGetSignableRegistrationResponseWithDefaults instantiates a new GetSignableRegistrationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSignableRegistrationResponseWithDefaults() *GetSignableRegistrationResponse {
	this := GetSignableRegistrationResponse{}
	return &this
}

// GetOperatorSignature returns the OperatorSignature field value
func (o *GetSignableRegistrationResponse) GetOperatorSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperatorSignature
}

// GetOperatorSignatureOk returns a tuple with the OperatorSignature field value
// and a boolean to check if the value has been set.
func (o *GetSignableRegistrationResponse) GetOperatorSignatureOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OperatorSignature, true
}

// SetOperatorSignature sets field value
func (o *GetSignableRegistrationResponse) SetOperatorSignature(v string) {
	o.OperatorSignature = v
}

// GetPayloadHash returns the PayloadHash field value
func (o *GetSignableRegistrationResponse) GetPayloadHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayloadHash
}

// GetPayloadHashOk returns a tuple with the PayloadHash field value
// and a boolean to check if the value has been set.
func (o *GetSignableRegistrationResponse) GetPayloadHashOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.PayloadHash, true
}

// SetPayloadHash sets field value
func (o *GetSignableRegistrationResponse) SetPayloadHash(v string) {
	o.PayloadHash = v
}

func (o GetSignableRegistrationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operator_signature"] = o.OperatorSignature
	}
	if true {
		toSerialize["payload_hash"] = o.PayloadHash
	}
	return json.Marshal(toSerialize)
}

type NullableGetSignableRegistrationResponse struct {
	value *GetSignableRegistrationResponse
	isSet bool
}

func (v NullableGetSignableRegistrationResponse) Get() *GetSignableRegistrationResponse {
	return v.value
}

func (v *NullableGetSignableRegistrationResponse) Set(val *GetSignableRegistrationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSignableRegistrationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSignableRegistrationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSignableRegistrationResponse(val *GetSignableRegistrationResponse) *NullableGetSignableRegistrationResponse {
	return &NullableGetSignableRegistrationResponse{value: val, isSet: true}
}

func (v NullableGetSignableRegistrationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSignableRegistrationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


