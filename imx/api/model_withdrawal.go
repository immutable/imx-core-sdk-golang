/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// Withdrawal struct for Withdrawal
type Withdrawal struct {
	// Status of the on-chain batch confirmation for this withdrawal
	RollupStatus string `json:"rollup_status"`
	// Ethereum address of the user who requested this withdrawal
	Sender string `json:"sender"`
	// Status of this withdrawal
	Status string `json:"status"`
	// Time when this withdrawal was initiated
	Timestamp string `json:"timestamp"`
	Token Token `json:"token"`
	// Sequential ID of this transaction
	TransactionId int32 `json:"transaction_id"`
	// Withdrawal has been transferred to user's Layer 1 wallet
	WithdrawnToWallet bool `json:"withdrawn_to_wallet"`
}

// NewWithdrawal instantiates a new Withdrawal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWithdrawal(rollupStatus string, sender string, status string, timestamp string, token Token, transactionId int32, withdrawnToWallet bool) *Withdrawal {
	this := Withdrawal{}
	this.RollupStatus = rollupStatus
	this.Sender = sender
	this.Status = status
	this.Timestamp = timestamp
	this.Token = token
	this.TransactionId = transactionId
	this.WithdrawnToWallet = withdrawnToWallet
	return &this
}

// NewWithdrawalWithDefaults instantiates a new Withdrawal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWithdrawalWithDefaults() *Withdrawal {
	this := Withdrawal{}
	return &this
}

// GetRollupStatus returns the RollupStatus field value
func (o *Withdrawal) GetRollupStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RollupStatus
}

// GetRollupStatusOk returns a tuple with the RollupStatus field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetRollupStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RollupStatus, true
}

// SetRollupStatus sets field value
func (o *Withdrawal) SetRollupStatus(v string) {
	o.RollupStatus = v
}

// GetSender returns the Sender field value
func (o *Withdrawal) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetSenderOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *Withdrawal) SetSender(v string) {
	o.Sender = v
}

// GetStatus returns the Status field value
func (o *Withdrawal) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Withdrawal) SetStatus(v string) {
	o.Status = v
}

// GetTimestamp returns the Timestamp field value
func (o *Withdrawal) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetTimestampOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Withdrawal) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetToken returns the Token field value
func (o *Withdrawal) GetToken() Token {
	if o == nil {
		var ret Token
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetTokenOk() (*Token, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *Withdrawal) SetToken(v Token) {
	o.Token = v
}

// GetTransactionId returns the TransactionId field value
func (o *Withdrawal) GetTransactionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetTransactionIdOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *Withdrawal) SetTransactionId(v int32) {
	o.TransactionId = v
}

// GetWithdrawnToWallet returns the WithdrawnToWallet field value
func (o *Withdrawal) GetWithdrawnToWallet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.WithdrawnToWallet
}

// GetWithdrawnToWalletOk returns a tuple with the WithdrawnToWallet field value
// and a boolean to check if the value has been set.
func (o *Withdrawal) GetWithdrawnToWalletOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.WithdrawnToWallet, true
}

// SetWithdrawnToWallet sets field value
func (o *Withdrawal) SetWithdrawnToWallet(v bool) {
	o.WithdrawnToWallet = v
}

func (o Withdrawal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rollup_status"] = o.RollupStatus
	}
	if true {
		toSerialize["sender"] = o.Sender
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if true {
		toSerialize["withdrawn_to_wallet"] = o.WithdrawnToWallet
	}
	return json.Marshal(toSerialize)
}

type NullableWithdrawal struct {
	value *Withdrawal
	isSet bool
}

func (v NullableWithdrawal) Get() *Withdrawal {
	return v.value
}

func (v *NullableWithdrawal) Set(val *Withdrawal) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawal) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawal(val *Withdrawal) *NullableWithdrawal {
	return &NullableWithdrawal{value: val, isSet: true}
}

func (v NullableWithdrawal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


