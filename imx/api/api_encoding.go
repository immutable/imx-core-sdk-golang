/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type EncodingApi interface {

	/*
	EncodeAsset Retrieves the Starkex Encoded format for a given asset

	Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param assetType Asset type to be encoded. (asset/mintable-asset)
	@return ApiEncodeAssetRequest
	*/
	EncodeAsset(ctx context.Context, assetType string) ApiEncodeAssetRequest

	// EncodeAssetExecute executes the request
	//  @return EncodeAssetResponse
	EncodeAssetExecute(r ApiEncodeAssetRequest) (*EncodeAssetResponse, *http.Response, error)
}

// EncodingApiService EncodingApi service
type EncodingApiService service

type ApiEncodeAssetRequest struct {
	ctx context.Context
	ApiService EncodingApi
	assetType string
	encodeAssetRequest *EncodeAssetRequest
}

// Encode Asset
func (r ApiEncodeAssetRequest) EncodeAssetRequest(encodeAssetRequest EncodeAssetRequest) ApiEncodeAssetRequest {
	r.encodeAssetRequest = &encodeAssetRequest
	return r
}

func (r ApiEncodeAssetRequest) Execute() (*EncodeAssetResponse, *http.Response, error) {
	return r.ApiService.EncodeAssetExecute(r)
}

/*
EncodeAsset Retrieves the Starkex Encoded format for a given asset

Retrieves the Starkex Encoded format for a given asset so that it can be used as parameter for Starkex smart contracts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param assetType Asset type to be encoded. (asset/mintable-asset)
 @return ApiEncodeAssetRequest
*/
func (a *EncodingApiService) EncodeAsset(ctx context.Context, assetType string) ApiEncodeAssetRequest {
	return ApiEncodeAssetRequest{
		ApiService: a,
		ctx: ctx,
		assetType: assetType,
	}
}

// Execute executes the request
//  @return EncodeAssetResponse
func (a *EncodingApiService) EncodeAssetExecute(r ApiEncodeAssetRequest) (*EncodeAssetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EncodeAssetResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EncodingApiService.EncodeAsset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/encode/{assetType}"
	localVarPath = strings.Replace(localVarPath, "{"+"assetType"+"}", url.PathEscape(parameterToString(r.assetType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.encodeAssetRequest == nil {
		return localVarReturnValue, nil, reportError("encodeAssetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.encodeAssetRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
