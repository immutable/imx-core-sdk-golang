/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// AggregateLimit struct for AggregateLimit
type AggregateLimit struct {
	// Max transaction amount
	MaxAmount *float32 `json:"max_amount,omitempty"`
	// Min transaction amount
	MinAmount *float32 `json:"min_amount,omitempty"`
}

// NewAggregateLimit instantiates a new AggregateLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateLimit() *AggregateLimit {
	this := AggregateLimit{}
	return &this
}

// NewAggregateLimitWithDefaults instantiates a new AggregateLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateLimitWithDefaults() *AggregateLimit {
	this := AggregateLimit{}
	return &this
}

// GetMaxAmount returns the MaxAmount field value if set, zero value otherwise.
func (o *AggregateLimit) GetMaxAmount() float32 {
	if o == nil || o.MaxAmount == nil {
		var ret float32
		return ret
	}
	return *o.MaxAmount
}

// GetMaxAmountOk returns a tuple with the MaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateLimit) GetMaxAmountOk() (*float32, bool) {
	if o == nil || o.MaxAmount == nil {
		return nil, false
	}
	return o.MaxAmount, true
}

// HasMaxAmount returns a boolean if a field has been set.
func (o *AggregateLimit) HasMaxAmount() bool {
	if o != nil && o.MaxAmount != nil {
		return true
	}

	return false
}

// SetMaxAmount gets a reference to the given float32 and assigns it to the MaxAmount field.
func (o *AggregateLimit) SetMaxAmount(v float32) {
	o.MaxAmount = &v
}

// GetMinAmount returns the MinAmount field value if set, zero value otherwise.
func (o *AggregateLimit) GetMinAmount() float32 {
	if o == nil || o.MinAmount == nil {
		var ret float32
		return ret
	}
	return *o.MinAmount
}

// GetMinAmountOk returns a tuple with the MinAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateLimit) GetMinAmountOk() (*float32, bool) {
	if o == nil || o.MinAmount == nil {
		return nil, false
	}
	return o.MinAmount, true
}

// HasMinAmount returns a boolean if a field has been set.
func (o *AggregateLimit) HasMinAmount() bool {
	if o != nil && o.MinAmount != nil {
		return true
	}

	return false
}

// SetMinAmount gets a reference to the given float32 and assigns it to the MinAmount field.
func (o *AggregateLimit) SetMinAmount(v float32) {
	o.MinAmount = &v
}

func (o AggregateLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxAmount != nil {
		toSerialize["max_amount"] = o.MaxAmount
	}
	if o.MinAmount != nil {
		toSerialize["min_amount"] = o.MinAmount
	}
	return json.Marshal(toSerialize)
}

type NullableAggregateLimit struct {
	value *AggregateLimit
	isSet bool
}

func (v NullableAggregateLimit) Get() *AggregateLimit {
	return v.value
}

func (v *NullableAggregateLimit) Set(val *AggregateLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateLimit(val *AggregateLimit) *NullableAggregateLimit {
	return &NullableAggregateLimit{value: val, isSet: true}
}

func (v NullableAggregateLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


