/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the MintableTokenDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MintableTokenDetails{}

// MintableTokenDetails struct for MintableTokenDetails
type MintableTokenDetails struct {
	// Blueprint of this token
	Blueprint string `json:"blueprint"`
	// ID provided by the client for this token
	ClientTokenId string `json:"client_token_id"`
	// IMX Id of this token
	TokenId string `json:"token_id"`
}

// NewMintableTokenDetails instantiates a new MintableTokenDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMintableTokenDetails(blueprint string, clientTokenId string, tokenId string) *MintableTokenDetails {
	this := MintableTokenDetails{}
	this.Blueprint = blueprint
	this.ClientTokenId = clientTokenId
	this.TokenId = tokenId
	return &this
}

// NewMintableTokenDetailsWithDefaults instantiates a new MintableTokenDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMintableTokenDetailsWithDefaults() *MintableTokenDetails {
	this := MintableTokenDetails{}
	return &this
}

// GetBlueprint returns the Blueprint field value
func (o *MintableTokenDetails) GetBlueprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Blueprint
}

// GetBlueprintOk returns a tuple with the Blueprint field value
// and a boolean to check if the value has been set.
func (o *MintableTokenDetails) GetBlueprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blueprint, true
}

// SetBlueprint sets field value
func (o *MintableTokenDetails) SetBlueprint(v string) {
	o.Blueprint = v
}

// GetClientTokenId returns the ClientTokenId field value
func (o *MintableTokenDetails) GetClientTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientTokenId
}

// GetClientTokenIdOk returns a tuple with the ClientTokenId field value
// and a boolean to check if the value has been set.
func (o *MintableTokenDetails) GetClientTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientTokenId, true
}

// SetClientTokenId sets field value
func (o *MintableTokenDetails) SetClientTokenId(v string) {
	o.ClientTokenId = v
}

// GetTokenId returns the TokenId field value
func (o *MintableTokenDetails) GetTokenId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenId
}

// GetTokenIdOk returns a tuple with the TokenId field value
// and a boolean to check if the value has been set.
func (o *MintableTokenDetails) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenId, true
}

// SetTokenId sets field value
func (o *MintableTokenDetails) SetTokenId(v string) {
	o.TokenId = v
}

func (o MintableTokenDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MintableTokenDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blueprint"] = o.Blueprint
	toSerialize["client_token_id"] = o.ClientTokenId
	toSerialize["token_id"] = o.TokenId
	return toSerialize, nil
}

type NullableMintableTokenDetails struct {
	value *MintableTokenDetails
	isSet bool
}

func (v NullableMintableTokenDetails) Get() *MintableTokenDetails {
	return v.value
}

func (v *NullableMintableTokenDetails) Set(val *MintableTokenDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableMintableTokenDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableMintableTokenDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMintableTokenDetails(val *MintableTokenDetails) *NullableMintableTokenDetails {
	return &NullableMintableTokenDetails{value: val, isSet: true}
}

func (v NullableMintableTokenDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMintableTokenDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


