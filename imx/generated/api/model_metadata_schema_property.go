/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// MetadataSchemaProperty struct for MetadataSchemaProperty
type MetadataSchemaProperty struct {
	// Sets the metadata as filterable
	Filterable bool `json:"filterable"`
	// Name of the metadata key
	Name string `json:"name"`
	// Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/immutable/docs/asset-metadata#property-type-mapping
	Type string `json:"type"`
}

// NewMetadataSchemaProperty instantiates a new MetadataSchemaProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataSchemaProperty(filterable bool, name string, type_ string) *MetadataSchemaProperty {
	this := MetadataSchemaProperty{}
	this.Filterable = filterable
	this.Name = name
	this.Type = type_
	return &this
}

// NewMetadataSchemaPropertyWithDefaults instantiates a new MetadataSchemaProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataSchemaPropertyWithDefaults() *MetadataSchemaProperty {
	this := MetadataSchemaProperty{}
	return &this
}

// GetFilterable returns the Filterable field value
func (o *MetadataSchemaProperty) GetFilterable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Filterable
}

// GetFilterableOk returns a tuple with the Filterable field value
// and a boolean to check if the value has been set.
func (o *MetadataSchemaProperty) GetFilterableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filterable, true
}

// SetFilterable sets field value
func (o *MetadataSchemaProperty) SetFilterable(v bool) {
	o.Filterable = v
}

// GetName returns the Name field value
func (o *MetadataSchemaProperty) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetadataSchemaProperty) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetadataSchemaProperty) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *MetadataSchemaProperty) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetadataSchemaProperty) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetadataSchemaProperty) SetType(v string) {
	o.Type = v
}

func (o MetadataSchemaProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filterable"] = o.Filterable
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMetadataSchemaProperty struct {
	value *MetadataSchemaProperty
	isSet bool
}

func (v NullableMetadataSchemaProperty) Get() *MetadataSchemaProperty {
	return v.value
}

func (v *NullableMetadataSchemaProperty) Set(val *MetadataSchemaProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataSchemaProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataSchemaProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataSchemaProperty(val *MetadataSchemaProperty) *NullableMetadataSchemaProperty {
	return &NullableMetadataSchemaProperty{value: val, isSet: true}
}

func (v NullableMetadataSchemaProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataSchemaProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


