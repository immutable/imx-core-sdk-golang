/*
Immutable X API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1
Contact: support@immutable.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type CollectionsApi interface {

	/*
	CreateCollection Create collection

	Create collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateCollectionRequest
	*/
	CreateCollection(ctx context.Context) ApiCreateCollectionRequest

	// CreateCollectionExecute executes the request
	//  @return Collection
	CreateCollectionExecute(r ApiCreateCollectionRequest) (*Collection, *http.Response, error)

	/*
	GetCollection Get details of a collection at the given address

	Get details of a collection at the given address

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address Collection contract address
	@return ApiGetCollectionRequest
	*/
	GetCollection(ctx context.Context, address string) ApiGetCollectionRequest

	// GetCollectionExecute executes the request
	//  @return Collection
	GetCollectionExecute(r ApiGetCollectionRequest) (*Collection, *http.Response, error)

	/*
	ListCollectionFilters Get a list of collection filters

	Get a list of collection filters

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address Collection contract address
	@return ApiListCollectionFiltersRequest
	*/
	ListCollectionFilters(ctx context.Context, address string) ApiListCollectionFiltersRequest

	// ListCollectionFiltersExecute executes the request
	//  @return CollectionFilter
	ListCollectionFiltersExecute(r ApiListCollectionFiltersRequest) (*CollectionFilter, *http.Response, error)

	/*
	ListCollections Get a list of collections

	Get a list of collections

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListCollectionsRequest
	*/
	ListCollections(ctx context.Context) ApiListCollectionsRequest

	// ListCollectionsExecute executes the request
	//  @return ListCollectionsResponse
	ListCollectionsExecute(r ApiListCollectionsRequest) (*ListCollectionsResponse, *http.Response, error)

	/*
	UpdateCollection Update collection

	Update collection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param address Collection contract address
	@return ApiUpdateCollectionRequest
	*/
	UpdateCollection(ctx context.Context, address string) ApiUpdateCollectionRequest

	// UpdateCollectionExecute executes the request
	//  @return Collection
	UpdateCollectionExecute(r ApiUpdateCollectionRequest) (*Collection, *http.Response, error)
}

// CollectionsApiService CollectionsApi service
type CollectionsApiService service

type ApiCreateCollectionRequest struct {
	ctx context.Context
	ApiService CollectionsApi
	iMXSignature *string
	iMXTimestamp *string
	createCollectionRequest *CreateCollectionRequest
}

// String created by signing wallet address and timestamp. See https://docs.x.immutable.com/immutable/docs/generate-imx-signature
func (r ApiCreateCollectionRequest) IMXSignature(iMXSignature string) ApiCreateCollectionRequest {
	r.iMXSignature = &iMXSignature
	return r
}

// Unix Epoc timestamp
func (r ApiCreateCollectionRequest) IMXTimestamp(iMXTimestamp string) ApiCreateCollectionRequest {
	r.iMXTimestamp = &iMXTimestamp
	return r
}

// create a collection
func (r ApiCreateCollectionRequest) CreateCollectionRequest(createCollectionRequest CreateCollectionRequest) ApiCreateCollectionRequest {
	r.createCollectionRequest = &createCollectionRequest
	return r
}

func (r ApiCreateCollectionRequest) Execute() (*Collection, *http.Response, error) {
	return r.ApiService.CreateCollectionExecute(r)
}

/*
CreateCollection Create collection

Create collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateCollectionRequest
*/
func (a *CollectionsApiService) CreateCollection(ctx context.Context) ApiCreateCollectionRequest {
	return ApiCreateCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Collection
func (a *CollectionsApiService) CreateCollectionExecute(r ApiCreateCollectionRequest) (*Collection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Collection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CollectionsApiService.CreateCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/collections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.iMXSignature == nil {
		return localVarReturnValue, nil, reportError("iMXSignature is required and must be specified")
	}
	if r.iMXTimestamp == nil {
		return localVarReturnValue, nil, reportError("iMXTimestamp is required and must be specified")
	}
	if r.createCollectionRequest == nil {
		return localVarReturnValue, nil, reportError("createCollectionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["IMX-Signature"] = parameterToString(*r.iMXSignature, "")
	localVarHeaderParams["IMX-Timestamp"] = parameterToString(*r.iMXTimestamp, "")
	// body params
	localVarPostBody = r.createCollectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCollectionRequest struct {
	ctx context.Context
	ApiService CollectionsApi
	address string
}

func (r ApiGetCollectionRequest) Execute() (*Collection, *http.Response, error) {
	return r.ApiService.GetCollectionExecute(r)
}

/*
GetCollection Get details of a collection at the given address

Get details of a collection at the given address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address Collection contract address
 @return ApiGetCollectionRequest
*/
func (a *CollectionsApiService) GetCollection(ctx context.Context, address string) ApiGetCollectionRequest {
	return ApiGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return Collection
func (a *CollectionsApiService) GetCollectionExecute(r ApiGetCollectionRequest) (*Collection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Collection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CollectionsApiService.GetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/collections/{address}"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCollectionFiltersRequest struct {
	ctx context.Context
	ApiService CollectionsApi
	address string
	pageSize *int32
	nextPageToken *string
}

// Page size of the result
func (r ApiListCollectionFiltersRequest) PageSize(pageSize int32) ApiListCollectionFiltersRequest {
	r.pageSize = &pageSize
	return r
}

// Next page token
func (r ApiListCollectionFiltersRequest) NextPageToken(nextPageToken string) ApiListCollectionFiltersRequest {
	r.nextPageToken = &nextPageToken
	return r
}

func (r ApiListCollectionFiltersRequest) Execute() (*CollectionFilter, *http.Response, error) {
	return r.ApiService.ListCollectionFiltersExecute(r)
}

/*
ListCollectionFilters Get a list of collection filters

Get a list of collection filters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address Collection contract address
 @return ApiListCollectionFiltersRequest
*/
func (a *CollectionsApiService) ListCollectionFilters(ctx context.Context, address string) ApiListCollectionFiltersRequest {
	return ApiListCollectionFiltersRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return CollectionFilter
func (a *CollectionsApiService) ListCollectionFiltersExecute(r ApiListCollectionFiltersRequest) (*CollectionFilter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CollectionsApiService.ListCollectionFilters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/collections/{address}/filters"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.nextPageToken != nil {
		localVarQueryParams.Add("next_page_token", parameterToString(*r.nextPageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCollectionsRequest struct {
	ctx context.Context
	ApiService CollectionsApi
	pageSize *int32
	cursor *string
	orderBy *string
	direction *string
	blacklist *string
	whitelist *string
	keyword *string
}

// Page size of the result
func (r ApiListCollectionsRequest) PageSize(pageSize int32) ApiListCollectionsRequest {
	r.pageSize = &pageSize
	return r
}

// Cursor
func (r ApiListCollectionsRequest) Cursor(cursor string) ApiListCollectionsRequest {
	r.cursor = &cursor
	return r
}

// Property to sort by
func (r ApiListCollectionsRequest) OrderBy(orderBy string) ApiListCollectionsRequest {
	r.orderBy = &orderBy
	return r
}

// Direction to sort (asc/desc)
func (r ApiListCollectionsRequest) Direction(direction string) ApiListCollectionsRequest {
	r.direction = &direction
	return r
}

// List of collections not to be included, separated by commas
func (r ApiListCollectionsRequest) Blacklist(blacklist string) ApiListCollectionsRequest {
	r.blacklist = &blacklist
	return r
}

// List of collections to be included, separated by commas
func (r ApiListCollectionsRequest) Whitelist(whitelist string) ApiListCollectionsRequest {
	r.whitelist = &whitelist
	return r
}

// Keyword to search in collection name and description
func (r ApiListCollectionsRequest) Keyword(keyword string) ApiListCollectionsRequest {
	r.keyword = &keyword
	return r
}

func (r ApiListCollectionsRequest) Execute() (*ListCollectionsResponse, *http.Response, error) {
	return r.ApiService.ListCollectionsExecute(r)
}

/*
ListCollections Get a list of collections

Get a list of collections

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCollectionsRequest
*/
func (a *CollectionsApiService) ListCollections(ctx context.Context) ApiListCollectionsRequest {
	return ApiListCollectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListCollectionsResponse
func (a *CollectionsApiService) ListCollectionsExecute(r ApiListCollectionsRequest) (*ListCollectionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListCollectionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CollectionsApiService.ListCollections")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/collections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.blacklist != nil {
		localVarQueryParams.Add("blacklist", parameterToString(*r.blacklist, ""))
	}
	if r.whitelist != nil {
		localVarQueryParams.Add("whitelist", parameterToString(*r.whitelist, ""))
	}
	if r.keyword != nil {
		localVarQueryParams.Add("keyword", parameterToString(*r.keyword, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCollectionRequest struct {
	ctx context.Context
	ApiService CollectionsApi
	address string
	iMXSignature *string
	iMXTimestamp *string
	updateCollectionRequest *UpdateCollectionRequest
}

// String created by signing wallet address and timestamp
func (r ApiUpdateCollectionRequest) IMXSignature(iMXSignature string) ApiUpdateCollectionRequest {
	r.iMXSignature = &iMXSignature
	return r
}

// Unix Epoc timestamp
func (r ApiUpdateCollectionRequest) IMXTimestamp(iMXTimestamp string) ApiUpdateCollectionRequest {
	r.iMXTimestamp = &iMXTimestamp
	return r
}

// update a collection
func (r ApiUpdateCollectionRequest) UpdateCollectionRequest(updateCollectionRequest UpdateCollectionRequest) ApiUpdateCollectionRequest {
	r.updateCollectionRequest = &updateCollectionRequest
	return r
}

func (r ApiUpdateCollectionRequest) Execute() (*Collection, *http.Response, error) {
	return r.ApiService.UpdateCollectionExecute(r)
}

/*
UpdateCollection Update collection

Update collection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param address Collection contract address
 @return ApiUpdateCollectionRequest
*/
func (a *CollectionsApiService) UpdateCollection(ctx context.Context, address string) ApiUpdateCollectionRequest {
	return ApiUpdateCollectionRequest{
		ApiService: a,
		ctx: ctx,
		address: address,
	}
}

// Execute executes the request
//  @return Collection
func (a *CollectionsApiService) UpdateCollectionExecute(r ApiUpdateCollectionRequest) (*Collection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Collection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CollectionsApiService.UpdateCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/collections/{address}"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", url.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.iMXSignature == nil {
		return localVarReturnValue, nil, reportError("iMXSignature is required and must be specified")
	}
	if r.iMXTimestamp == nil {
		return localVarReturnValue, nil, reportError("iMXTimestamp is required and must be specified")
	}
	if r.updateCollectionRequest == nil {
		return localVarReturnValue, nil, reportError("updateCollectionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["IMX-Signature"] = parameterToString(*r.iMXSignature, "")
	localVarHeaderParams["IMX-Timestamp"] = parameterToString(*r.iMXTimestamp, "")
	// body params
	localVarPostBody = r.updateCollectionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
